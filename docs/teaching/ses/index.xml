<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Engineering Skills on Brain Baking</title>
    <link>https://brainbaking.com/teaching/ses/</link>
    <description>Recent content in Software Engineering Skills on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    
	<atom:link href="https://brainbaking.com/teaching/ses/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dependency Management</title>
      <link>https://brainbaking.com/teaching/ses/dependency-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/dependency-management/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
Lees ook: Meer uitleg over de Gradle build tool.
Wat is een &amp;lsquo;dependency&amp;rsquo;? Een dependency, of afhankelijkheid, is een externe bibliotheek die wordt gebruikt tijdens de ontwikkeling van een toepassing. Tijdens het vak &amp;lsquo;Software ontwerp in Java&amp;rsquo; zijn reeds de volgende externe libraries gebruikt:
 JavaFX Google Gson JUnit  Het vertrouwen op zo&amp;rsquo;n library houdt in dat een extern bestand, zoals een .</description>
    </item>
    
    <item>
      <title>Een introductie tot design patterns</title>
      <link>https://brainbaking.com/teaching/ses/patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/patterns/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills
Wat is dat, een patroon? Patronen zijn voor het mensenlijk brein eenvoudig herkenbaar: we zien stukjes van iets die we al eens ergens anders gezien hebben. Blokjes op een bepaalde manier ingekleurd, gehaakte patroontjes van een dekbed, Fibonacci spiralen in bloemblaadjes en zaadjes, &amp;hellip; Wanneer we programmeren, geldt dit principe ook: blokken code die herbruikt worden om eenvoudige oplossingen te bieden voor complexe problemen.</description>
    </item>
    
    <item>
      <title>Gebruikte Software</title>
      <link>https://brainbaking.com/teaching/ses/software/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/software/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills
Voor deze cursus werken we met Java en met Git. Dat betekent dat een JDK (en de Gradle build tool) en een Git client de enige vereisten zijn.
Onderstaande lijst kan helpen bij het installeren en configureren van zulke tools:
Commandline Tools  git-scm gradle  Om vlot met unix-like command lines te werken op een Windows machine, raden we één van de volgende toolchain aan:</description>
    </item>
    
    <item>
      <title>Java Gradle projecten</title>
      <link>https://brainbaking.com/teaching/ses/gradle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/gradle/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills
Helps teams build, automate and deliver better software, faster. Tenminste, toch volgens de gradle.org website.
Wat is dat, een build tool? Gradle is een build tool die de automatisatie van releasen, builden, testen, configureren, dependencies en libraries managen, &amp;hellip; eenvoudiger maakt. Kort gezegd: het maakt het leven van een ontwikkelaar eenvoudiger. In een config bestand genaamd build.gradle schrijft men met Groovy, een dynamische taal bovenop de JVM, op een descriptieve manier hoe Gradle de applicatie moet beheren.</description>
    </item>
    
    <item>
      <title>Labo x: Continuous Integration &amp; Deployment</title>
      <link>https://brainbaking.com/teaching/ses/ci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/ci/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
1. Continuous Integration (CI) Het softwareontwikkel proces is een continu proces: als een eerste versie van het product klaar is, en wordt overgemaakt aan klanten, volgt het onderhoud en een mogelijke volgende versie. Elke wijziging maakt potentiëel dingen kapot (geminimaliseerd met TDD), of introduceert nieuwe features. Dat betekent dat bij elke wijziging, een computer het hele build proces moet doorlopen om te controleren of er niets stuk is.</description>
    </item>
    
    <item>
      <title>Labo x: Design Patterns: (template)</title>
      <link>https://brainbaking.com/teaching/ses/designpattern_template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/designpattern_template/</guid>
      <description> &amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
&amp;ldquo;Factory&amp;rdquo; - Design Pattern Doelstelling Dive Into Design Patterns: Factory (method)
Voorbeeld 1. Opzet 2. Probleemstelling 3. Oplossing Eigenschappen van dit patroon Labo oefeningen Via  Github Classroom.
Opgave 1 bla
Denkvragen  bla  </description>
    </item>
    
    <item>
      <title>Labo x: Design Patterns: Decorator</title>
      <link>https://brainbaking.com/teaching/ses/decorator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/decorator/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
&amp;ldquo;Decorator&amp;rdquo; - Design Pattern Doelstelling  Voeg dynamisch functionaliteit toe als alternatief voor klassieke overerving. Gedraagt zich zoals het stukje &amp;lsquo;ingepakte&amp;rsquo; functionaliteit, maar voert extra handelingen uit. Wordt in Java altijd via interface implementaties uitegevoerd.  Dive Into Design Patterns: Decorator
Voorbeeld 1. Opzet Stel dat we in een fabriek op plaats X een auto samenstellen. De wagen is een zeer eenvoudige Volkswagen Golf, zonder opties.</description>
    </item>
    
    <item>
      <title>Labo x: Design Patterns: Dependency Injection</title>
      <link>https://brainbaking.com/teaching/ses/di/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/di/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
&amp;ldquo;Dependency Injection (DI)&amp;rdquo; - Design Pattern Doelstelling  Promoot modulariteit door afhankelijkheden te injecteren, zodat aparte modules eenvoudig inplugbaar zijn in andere productiecode. Op deze manier worden modules ook makkelijker tesbaar. Promoot Inversion of Control: een client die services aanroept zou niet mogen weten hoe services worden aangemaakt - deze zou moeten worden &amp;lsquo;geinjecteerd&amp;rsquo;.  Wikipedia: Dependency Injection
Voorbeeld 1. Opzet Als we verder gaan op het voorbeeld van de singleton, zien we dat een database handle nodig is om shopping cart gegevens op te halen.</description>
    </item>
    
    <item>
      <title>Labo x: Design Patterns: Facade</title>
      <link>https://brainbaking.com/teaching/ses/facade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/facade/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
&amp;ldquo;Facade&amp;rdquo; - Design Pattern Doelstelling  Scherm een complex stukje software af met behulp van een simpele interface Voorzie éénzelfde interface naar een set van verschillende mogelijke subsystemen. Een Facade is een high-level interface die mogelijks low-level systemen aanspreekt.  Dive Into Design Patterns: Facade
Voorbeeld 1. Opzet Stel dat we gegevens van de klant moeten versturen naar een overheidsinstantie. Die instantie beschikt jammer genoeg niet over voldoende budgetten om ook een cutting-edge server interface en implementatie aan te bieden.</description>
    </item>
    
    <item>
      <title>Labo x: Design Patterns: Factory</title>
      <link>https://brainbaking.com/teaching/ses/factory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/factory/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
&amp;ldquo;Factory&amp;rdquo; - Design Pattern Doelstelling  Scherm het aanmaken van bepaalde objecten af door middel van overerving en logica, waarbij die logica éénmalig wordt geïmplementeerd, en op een centrale plaats staat. Promoot een modulair model door de verantwoordlijkheid van object creatie en object gebruik te scheiden.  Dive Into Design Patterns: Factory (method)
Voorbeeld 1. Opzet Stel, je wilt aan de kassa van een niet al te grote lokale cinema een film kopen.</description>
    </item>
    
    <item>
      <title>Labo x: Design Patterns: Singleton</title>
      <link>https://brainbaking.com/teaching/ses/singleton/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/singleton/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
&amp;ldquo;Singleton&amp;rdquo; - Design Pattern Doelstelling  Vermijd de mogelijkheid tot meervoudige instantiatie van een bepaalde klasse. Er kan altijd maar één bepaalde instantie van bestaan. Voorzie een eenvoudige manier om vanuit eender waar in de code toegang te verkrijgen tot die éne instantie. Encapsuleer logica om deze instantie aan te maken, moest code dit raadplegen en dit toevallig de eerste keer zijn (lazy initialization).</description>
    </item>
    
    <item>
      <title>Labo x: Software Management Skills</title>
      <link>https://brainbaking.com/teaching/ses/management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/management/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
De chaos van het Werk De technische kant van het ontwikkelproces is slechts één kant van de medaille. De keerzijde bestaat uit het werk beheren en beheersen, zonder ten prooi te vallen aan de grillen van de klant of de chaos van de organisatie ervan.
Stel, een gemeente vraagt om een nieuwe website te ontwikkelen voor de lokale bibliotheek. Er wordt een vergadering ingepland met stafhouders om samen met jou te beslissen wat de vereisten zijn.</description>
    </item>
    
    <item>
      <title>Oefenzittingen: Github Clasroom</title>
      <link>https://brainbaking.com/teaching/ses/github-classroom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/github-classroom/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills
Onderstaande Github Classroom repositories zijn telkens Gradle Java projecten. Bewkaam jezelf eerst in de basis van Gradle als build tool.
Labo oefeningen TODO Links copypasten vanuit Github Classroom.
Design Patterns  Facade Dependency Injection Singleton Decorator Factory  Test Driven Development URL</description>
    </item>
    
    <item>
      <title>SESsy Library WebApp</title>
      <link>https://brainbaking.com/teaching/ses/sessy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/sessy/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills
SESsy Library: Een geïntegreerde oefening Download Locatie: op  Github via https://github.com/KULeuven-Diepenbeek/sessylibrary. Zie README.md op de hoofdpagina. SESsy library is:
 A Library Management Simulation WebApp for the &amp;lsquo;SES&amp;rsquo; (Software Engineering Skills) course
 Installatie Download via bovenstaande Github link, of met git clone. Dit is een &amp;ldquo;Gradle&amp;rdquo; project, die de build van ons Java ecosysteem verzorgt. Dat wil zeggen dat het Gradle systeem automatisch libraries (jar bestanden) download van een centrale repository, moesten die nodig zijn.</description>
    </item>
    
    <item>
      <title>Test Driven Development</title>
      <link>https://brainbaking.com/teaching/ses/tdd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/tdd/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
Test-Driven Development TDD (Test-Driven Development) is een hulpmiddel bij softwareontwikkeling om minder fouten te maken en sneller fouten te vinden, door éérst een test te schrijven en dan pas de implementatie. Die (unit) test zal dus eerst falen (ROOD), want er is nog helemaal geen code, en na de correcte implementatie uiteindelijk slagen (GROEN).
mermaid.initialize({ startOnLoad: true, flowchart: { useMaxWidth: true } });  graph LR; T{&#34;</description>
    </item>
    
    <item>
      <title>Test Driven Development met algoritmes: Capita Selecta</title>
      <link>https://brainbaking.com/teaching/ses/tdd-capita/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/tdd-capita/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
Een algoritme ontwerpen gebaseerd op Test Scenarios TODO</description>
    </item>
    
    <item>
      <title>Versie- en issuebeheer</title>
      <link>https://brainbaking.com/teaching/ses/versiebeheer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/versiebeheer/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
Wat is versiebeheer of source control? Source Control is een sleutelbegrip voor ontwikkelteams. Het stelt iedereen in staat om aan dezelfde source file te werken zonder bestanden op- en neer te sturen, voorziet backups, maakt het mogelijk om releases en branches uit te rollen, &amp;hellip;
Een versiebeheer systeem bewaart alle wijzigingen aan (tekst)bestanden. Dat betekent dat eender welke wijziging, door wie dan ook, teruggedraaid kan worden.</description>
    </item>
    
  </channel>
</rss>