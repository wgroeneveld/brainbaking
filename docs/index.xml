<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Brain Baking</title>
    <link>https://brainbaking.com/</link>
    <description>Recent content on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    <lastBuildDate>Tue, 25 Feb 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://brainbaking.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Five reasons why agile and academia don&#39;t go together</title>
      <link>https://brainbaking.com/post/agile-academia/</link>
      <pubDate>Tue, 25 Feb 2020 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/agile-academia/</guid>
      <description>I wish the word &amp;ldquo;don&amp;rsquo;t&amp;rdquo; in the title of this post could go away, but after years of trying, I have to say it cannot. There are so many aspects of the academic world that speak against agility that I had to make the conscious choice to reduce the list to five big reasons why I think both do not converge well. Remember that this is my own subjective opinion, and perhaps also meant to utter some well-meant critique, but by no means a one-sided rant: I have spent rather large parts of my career on both sides.</description>
    </item>
    
    <item>
      <title>Over Onmiddellijke Voldoening</title>
      <link>https://brainbaking.com/essays/over-onmiddellijke-voldoening/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/essays/over-onmiddellijke-voldoening/</guid>
      <description>Spring jij onmiddellijk in je wagen als die plotse zin in tomatensoep op komt en je zelf niets in huis hebt? &amp;lsquo;Snel even een blikje lenen, ik ben zo terug schat!&amp;rsquo; Het lijkt als een onschuldige actie, maar er schuilt heel wat meer achter deze dorst naar huiselijke soep: alles wat ik niet heb, wil ik, en wel nu dadelijk.
Het probleem is dat het vandaag ook allemaal kan.
Je kan via Ali Express eender wat bestellen.</description>
    </item>
    
    <item>
      <title>Programming: a Creative Cognitive Process</title>
      <link>https://brainbaking.com/post/creative-cognitive-processes/</link>
      <pubDate>Tue, 08 Oct 2019 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/creative-cognitive-processes/</guid>
      <description>My previous studies investigated which non-technical skills are currently being taught in software engineering education, and which are perceived as needed to excel in the industry. We found creativity to be one of the key skills that still seemed to be mostly ignored in higher education (at least in Computing). The term &amp;lsquo;creativity&amp;rsquo; is highly subjective, contextual, and vaguely defined (or not at all), so connecting the dots proves to be quite a challenge.</description>
    </item>
    
    <item>
      <title>De zin en onzin van conferenties</title>
      <link>https://brainbaking.com/essays/de-zin-en-onzin-van-conferenties/</link>
      <pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/essays/de-zin-en-onzin-van-conferenties/</guid>
      <description>Bedrijven zien conferenties vaak als een onnodige kost waar hun werknemers nauwelijks worden naar toe gestuurd. Meestal gaat dit keurig af van het jaarlijks opleidingsbudget, ook weer keurig verrekend en verdeeld per persoon. Als Piet graag drie dagen wenst te gaan, en Jan in hetzelfde team ook, ontstaat er al een probleem: wie gaat dan die grote hoeveelheid dagelijkse problemen opkuisen? Er wordt een compromis gesloten: Piet en Jan mogen elk slechts één dag gaan, en elk op één aparte dag van het evenement.</description>
    </item>
    
    <item>
      <title>Teaching Object-Oriented design using the GBA</title>
      <link>https://brainbaking.com/post/teaching-oo-with-gba/</link>
      <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/teaching-oo-with-gba/</guid>
      <description>Electrical Engineering students have to work through a programming course in their third year at KU Leuven, a course called &amp;lsquo;Software Design in C/C++&amp;rsquo;. This course is one of the things I inherited from my retired colleague when I started working for the University. As is the case with most programming courses, it&amp;rsquo;s contents was boring as hell.
So, instead of simply making minor adjustments to the syllabus and calling it a day, in the summer of 2018 I decided to throw everything in the begin and start over - hooray, a greenfield project!</description>
    </item>
    
    <item>
      <title>IT Competences and Certificates</title>
      <link>https://brainbaking.com/post/competences-and-certificates/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/competences-and-certificates/</guid>
      <description>My research on soft skills in software engineering has brought me to many shady places so far. These places are dark, murky, and carry the rotten smell of mold. Welcome to the wonderful world of &amp;ldquo;you&amp;rsquo;re doing it wrong&amp;ldquo;: professional competence frameworks. To add more strength to my point, the header image of this article is a generic one, grabbed from Pexels, using the search term &amp;ldquo;corporate&amp;rdquo;. Can it be any more enterprise-y?</description>
    </item>
    
    <item>
      <title>A Ph.D. Thesis: Iteration 2</title>
      <link>https://brainbaking.com/post/phd-iteration-2/</link>
      <pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/phd-iteration-2/</guid>
      <description>A huge amount of ideas and a quite a few months later, my original proposal, called &amp;ldquo;The disparity between industrial requirements and classic education of modern software engineering.&amp;rdquo;, changed for the better. The approved abstract is called &amp;ldquo;Improving software engineering education by closing the gap with modern non-technical industrial requirements&amp;rdquo;. After struggling to find any focus (and reference material to work with), I now settle with:
 Mastering Lean Skills in Software Engineering Education</description>
    </item>
    
    <item>
      <title>Over analoog en digitaal</title>
      <link>https://brainbaking.com/essays/over-analoog-en-digitaal/</link>
      <pubDate>Sat, 22 Dec 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/essays/over-analoog-en-digitaal/</guid>
      <description>Eens blazen en hem &amp;ldquo;er uit en weer in steken&amp;rdquo; - aan wat doet deze vreemde uitspraak denken? Zedige kinderen die opgroeiden in de jaren &amp;lsquo;90 denken hopelijk onmiddellijk aan een console cartridge: slecht contact met de console zelf door mogelijke stofjes zorgde er voor dat je console spel niet goed opstartte. De gebruikelijke handeling om het ding terug draaiende te krijgen was de cartridge uit de console trekken, eens goed op de contacten &amp;ldquo;blazen&amp;rdquo;, en hem er goed terug in drukken.</description>
    </item>
    
    <item>
      <title>Unit Testing PicoBlaze Assembly files</title>
      <link>https://brainbaking.com/post/unit-testing-picoblaze-assembly/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/unit-testing-picoblaze-assembly/</guid>
      <description>To continue our unit testing tradition, each time I land on a new language or piece of technology, I carefully assess whether it&amp;rsquo;s possible to write tests first. Unsurprisingly, even in Assembly it&amp;rsquo;s possible. My recent foray into the digital electronics world has let me to write instructions for the Xilinx PicoBlaze 6 FPGA microcontroller. This Assembly dialect, written in &amp;ldquo;Psm(4)&amp;rdquo; files, is destined for a different architecture. That means linking and leaning on Google Test using C++ isn&amp;rsquo;t possible.</description>
    </item>
    
    <item>
      <title>A Decade in the Software Engineering industry</title>
      <link>https://brainbaking.com/post/a-decade-in-the-industry/</link>
      <pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/a-decade-in-the-industry/</guid>
      <description>It never occurred to me that an article like this might be very informative for those interested in knowing how things work in the software engineering industry. Google&amp;rsquo;s related results to &amp;ldquo;10 years in IT industry&amp;rdquo; are rather depressing: &amp;ldquo;what to do after 10 years of experience&amp;rdquo;, &amp;ldquo;career options after 10 years&amp;rdquo;, &amp;ldquo;how to survive industry after 10 years&amp;rdquo;, &amp;ldquo;best career path after 10 years&amp;rdquo;. It seems to suggest you&amp;rsquo;re done after &amp;ldquo;grinding to level 10&amp;rdquo; - time to boot up another character build?</description>
    </item>
    
    <item>
      <title>The Startup of a Lean Doctorate</title>
      <link>https://brainbaking.com/post/lean-doctorate/</link>
      <pubDate>Fri, 19 Oct 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/lean-doctorate/</guid>
      <description>At the start of my doctoral study, things are a bit woozy. The use of that word &amp;ldquo;bit&amp;rdquo; may be the inverse of exaggeration: shaping an abstract idea into a malleable and well-defined project is a process that can easily take up months. After that you still have to &amp;ldquo;start&amp;rdquo; actually doing stuff in context of your invented project! Most doctorates are classical examples of a waterfall process: come up with an abstract, do your (and a lot of) literature study, reach certain milestones.</description>
    </item>
    
    <item>
      <title>Productivity Tools on all platforms</title>
      <link>https://brainbaking.com/post/productivity-tools-multiplatform/</link>
      <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/productivity-tools-multiplatform/</guid>
      <description>I&amp;rsquo;ve grown so accustomed to some of Neal Ford&amp;rsquo;s The Productive Programmer &amp;ldquo;power tools&amp;rdquo; that each time I install a new OS or get a new laptop, I start with my list of cant-live-without tools. I don&amp;rsquo;t usually switch between OSes a lot, but my recent switch of work environment has opened up the possibility to boot Linux again, next to Windows 10 or of course my beloved own laptop with OSX.</description>
    </item>
    
    <item>
      <title>Boeken die mij gevormd hebben tot wie ik ben</title>
      <link>https://brainbaking.com/essays/boeken-die-mij-gevormd-hebben/</link>
      <pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/essays/boeken-die-mij-gevormd-hebben/</guid>
      <description>Zoals 2017 in boeken kan worden uitgedrukt, zo kan mijn leven in zijn geheel tot nu toe worden uitgedrukt in de boeken die het sterk beïnvloed heeft. Tijdens het lezen van Montaigne&amp;rsquo;s Essays kwam ik tot de vaststelling dat ook Michel de onderwerpen van zijn &amp;lsquo;Essais&amp;rsquo; laat afhangen van de voorgaande werken die hij onder ogen heeft gekregen, zoals Cicero en Seneca in deel I. Iedereen moet immers zijn inspiratie ergens vandaan halen.</description>
    </item>
    
    <item>
      <title>Domain Driven Design in C</title>
      <link>https://brainbaking.com/post/domain-driven-design-in-c/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/domain-driven-design-in-c/</guid>
      <description>As old as the language C may be, it took other languages a long time to catch up with something as mundane as a pointer. Pointers are the bread and butter of any C program and are widely regarded as a horrifying thing to work with. It might be a drag and require some plumbing (as with any language) but the payoff is extreme flexibility and control.
An address can point to anything - that includes functions.</description>
    </item>
    
    <item>
      <title>Over de inflatie van intellect</title>
      <link>https://brainbaking.com/essays/over-intellect/</link>
      <pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/essays/over-intellect/</guid>
      <description>Het resultaat van een onderzoek dat ik las in Frank Furedi&amp;rsquo;s &amp;ldquo;Waar zijn de intellectuelen?&amp;rdquo; boezemt mij veel angst in: minder dan de helft van de samenleving wil tegenwoordig nog literatuur lezen. En dit gaat dan nog over literatuur! Ik ken veel mensen die met hun ogen draaien zodra ik nog maar het woord &amp;ldquo;boek&amp;rdquo; uitspreek, laat staan een conversatie over filosofie aan te gaan. Ik had er niet bij stilgestaan dat dit eenvoudig geëxtrapoleerd kan worden.</description>
    </item>
    
    <item>
      <title>Over tijdsbesef</title>
      <link>https://brainbaking.com/essays/over-tijdsbesef/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/essays/over-tijdsbesef/</guid>
      <description>In Venteuil, een klein dorpje in de Champagne streek te Frankrijk dat vijfhonderd hele inwoners telt, ligt wijnmaker Autréau-Lasnot. Er zijn honderden grote en kleine champagneboeren gevestigd in de streek - overal waar je kijkt zie je wijnstokken vergezeld met rozen en bijenkorven. Ik drink geen alcohol, maar dat is geen reden om een uitgebreid bezoek af te slaan: ik hou van alles wat met fermentatie te maken heeft. Het alcoholisch bijproduct is dan voor mij natuurlijk jammer: terwijl iedereen zich bezat aan de verschillende proeverijen kan ik vrolijk wat rondkijken.</description>
    </item>
    
    <item>
      <title>Computer Science learning pathways</title>
      <link>https://brainbaking.com/post/informatics-education-modules/</link>
      <pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/informatics-education-modules/</guid>
      <description>Also worth reading: Reverse engineering a curriculum.
I happened to come across a very interesting study path for &amp;ldquo;game programmers&amp;rdquo; published at https://github.com/miloyip/game-programmer. It&amp;rsquo;s a nice visual representation of books that help you become a better (game) programmer, starting from zero (game programming for kids) and ending at advanced game physics and Artificial Intelligence. I am not keen on becoming a game programmer but the reason this is interesting is that the author has done a great job trying to categorize the different requirements - what it takes to be a programmer in general.</description>
    </item>
    
    <item>
      <title>Reverse engineering a curriculum</title>
      <link>https://brainbaking.com/post/reverse-engineering-a-curriculum/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/reverse-engineering-a-curriculum/</guid>
      <description>Also worth reading: Teaching by philosophy.
What if, instead of starting with the beginning, you&amp;rsquo;d start with imagining where you&amp;rsquo;d land if you&amp;rsquo;d successfully finish a big project? Thinking like this would temporarily eliminate the how question and focus on the what or why question on a higher level. It&amp;rsquo;s a good exercise that might net me new ideas or forge novel connections between two slumbering thoughts. Let&amp;rsquo;s try to imagine what a curriculum for computer science should look like ideally without holding back on the actual practical possibilities - based on rough ideas noted in my proposal.</description>
    </item>
    
    <item>
      <title>Over het introduceren van bedrijfsethiek</title>
      <link>https://brainbaking.com/essays/over-bedrijfsethiek/</link>
      <pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/essays/over-bedrijfsethiek/</guid>
      <description>Addendum: 7 highly successful software engineering cultures is de moeite om in detail na te lezen, waarbij bedrijven zoals GitLab hun &amp;ldquo;Team Handboek&amp;rdquo; open stellen. Het gaat véél verder dan enkel een cultuur: er staat in wanneer aandeelhouders samenkomen, hoe er omgegaan wordt met nieuwe kandidaten en hoe je je verlof dient in te plannen. Transparantie zò sterk door de aorta van het bedrijf laten stromen, is zeer bewonderenswaardig.</description>
    </item>
    
    <item>
      <title>A Ph.D. Thesis Proposal</title>
      <link>https://brainbaking.com/post/phd-proposal/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/phd-proposal/</guid>
      <description>The following Ph.D. proposal has been tailored to act as a clarification for colleagues and professors, hence it&amp;rsquo;s written in Dutch. The English abstract will follow later. The thesis subject:
 The disparity between industrial requirements and classic education of modern software engineering.
 De probleemstelling  Wat missen ontwikkelteams en developers1 tegenwoordig?
 Vanuit die vraag ben ik vertrokken.
Als software ingenieur met meer dan een decennium ervaring heb ik een grote interesse ontwikkeld in de manier waarop software tot stand komt.</description>
    </item>
    
    <item>
      <title>Teaching by philosophy</title>
      <link>https://brainbaking.com/post/teaching-philosophy-first/</link>
      <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/teaching-philosophy-first/</guid>
      <description>Also worth reading: reverse engineering a curriculum.
Awareness, that&amp;rsquo;s the keyword I&amp;rsquo;m looking for here.
Students are required to slog through a lot of classes during their university years. You pick a major, computer science, and you start learning things like algorithms, data structures, compilers, operating systems, and more abstract (maybe even worse) things like mathematics, geometry and logic. You of course accept those separate subjects as a part of the computer science major - there&amp;rsquo;s little other choice.</description>
    </item>
    
    <item>
      <title>Over entropie</title>
      <link>https://brainbaking.com/essays/over-entropie/</link>
      <pubDate>Sun, 20 May 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/essays/over-entropie/</guid>
      <description>Filosofie kan gezien worden als een poging om dingen rondom de mensheid te definiëren. Ik noem het een poging, en geen manier, omdat we al duizenden jaren kritiek aan het geven zijn op elkaars definities. Ik noem het dingen, en niet zichtbare dingen, omdat juist ongrijpbare dingen ons zo sterk intrigeren dat we ook de nood voelen om daar een theoretische vorm aan te koppelen.
Ons bewustzijn produceert veel prachtige wetenschapstakken maar ook veel angsten.</description>
    </item>
    
    <item>
      <title>Thinking in terms of objects</title>
      <link>https://brainbaking.com/post/thinking-in-terms-of-objects/</link>
      <pubDate>Sat, 28 Apr 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/thinking-in-terms-of-objects/</guid>
      <description>Writing software isn&amp;rsquo;t much different than describing a world. The world, where we live in, is a world, not the only one. With software, we could, theoretically speaking, describe our own world. If we don&amp;rsquo;t think about software, how would we describe that or another world? How would I build a fantasy world in a novel where my readers can relate to the world and be engaged?
By describing with our language.</description>
    </item>
    
    <item>
      <title>Death to pseudocode?</title>
      <link>https://brainbaking.com/post/pseudocode/</link>
      <pubDate>Fri, 06 Apr 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/pseudocode/</guid>
      <description>Coming across pseudocode isn&amp;rsquo;t something that might happen every day except if you&amp;rsquo;re used to browsing through the more theoretical and academic oriented &amp;ldquo;computer science&amp;rdquo; handbooks. We, the practical &amp;ldquo;software engineers&amp;rdquo; of nowadays, usually stop searching for something after our browser hits Stackoverflow. Stack is loaded with technical samples, gists of code, and lot&amp;rsquo;s of won&amp;rsquo;t-ever-compile-wrongly-copy-pasted code. Real code. If you&amp;rsquo;re working in Java, you probably end up with articles full of Java snippets.</description>
    </item>
    
    <item>
      <title>Concentrating on serendipitous creativity</title>
      <link>https://brainbaking.com/post/serendipitous-creativity/</link>
      <pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/serendipitous-creativity/</guid>
      <description>When was the last time you were able to focus well on a difficult task in an office landscape? For long periods of time? Did you manage to finish the task in time? Knowledge workers are increasingly pushed together in large open spaces to promote collaboration and serendipity. But those unplanned happy accidents create another completely unplanned rather unhappy accident: the loss of concentration. According to Cal Newport&amp;rsquo;s &amp;ldquo;Deep Work&amp;rdquo; term, long uninterrupted hours of concentration manage to get difficult things done - not short bursts of collaboration.</description>
    </item>
    
    <item>
      <title>Hiding Code Complexity</title>
      <link>https://brainbaking.com/post/hiding-complexity/</link>
      <pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/hiding-complexity/</guid>
      <description>We like to talk about the architecture of our software because we like complexity. Software developers are the bears, and complex patterns seem to be the honey. The more I pair with people the more I wonder: &amp;ldquo;what makes us decide to take on a simple question with a difficult answer&amp;rdquo;? Why would anyone choose to implement something so complex, that it cannot be easily understood even the day after it&amp;rsquo;s committed?</description>
    </item>
    
    <item>
      <title>Take your time.</title>
      <link>https://brainbaking.com/post/take-your-time/</link>
      <pubDate>Fri, 16 Feb 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/take-your-time/</guid>
      <description>&amp;ldquo;Let&amp;rsquo;s try to keep silent for a minute and enjoy the complete absence of traffic noise!&amp;rdquo; I yelled to my friends. We were standing on a sandy hill in the middle of national park &amp;ldquo;Hoge Veluwe&amp;rdquo;. One of our friends, a biologist, enticed us to help him identify animal tracks in the sand. I don&amp;rsquo;t know anything about even-toed ungulates, but I know a bit about the joy of discovery.  &amp;ldquo;Great idea!</description>
    </item>
    
    <item>
      <title>2017 in books</title>
      <link>https://brainbaking.com/post/2017-in-books/</link>
      <pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/2017-in-books/</guid>
      <description>Goodreads presented me with a neat overview on my read books in 2017 you can also take a look at. The dull page statistics are of no interest to me, but the kind of books I&amp;rsquo;ve read do tell a story that might be worth sharing.
When it comes to keeping track of what I read, Goodreads might be the best thing that happened to me yet. But I can&amp;rsquo;t say that I&amp;rsquo;m a consequent user of my own listage.</description>
    </item>
    
    <item>
      <title>Inventing - for the worse?</title>
      <link>https://brainbaking.com/post/inventing-for-the-worse/</link>
      <pubDate>Sat, 30 Dec 2017 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/inventing-for-the-worse/</guid>
      <description>People have an irresistible urge to create. But we often mistake productivity with creativity with really creating. Homo creativus. But is this always a good thing? The best inventions in the world bring great sorrow to millions of people today. Then I started wondering, what if&amp;hellip;
Electricity wasn&amp;rsquo;t invented? Mass production wouldn&amp;rsquo;t be possible. Everything you use, from your watch to your laptop, stove, to what you&amp;rsquo;re wearing wouldn&amp;rsquo;t be possible.</description>
    </item>
    
    <item>
      <title>I&#39;m jealous of my dog</title>
      <link>https://brainbaking.com/post/i-am-jealous-of-my-dog/</link>
      <pubDate>Thu, 17 Aug 2017 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/i-am-jealous-of-my-dog/</guid>
      <description>My dog, Miel (yes, like the French word for honey. It&amp;rsquo;s a Golden Retriever, get the link?), loves to walk. He also likes playing a lot, but as soon as I put on my shoes or get near the garden gate, he starts to freak out, thinking it&amp;rsquo;s that time again. Since I have no idea what is going on in is head, I said &amp;ldquo;thinking&amp;rdquo;, because we humans associate animals with our own behavior - because that&amp;rsquo;s what we&amp;rsquo;re familiar with.</description>
    </item>
    
    <item>
      <title>A quick look at 6 fountain pens</title>
      <link>https://brainbaking.com/post/fountain-pens-first-look/</link>
      <pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/fountain-pens-first-look/</guid>
      <description>My recent addiction to fountain pens has reached new heights. I happened to talk about pens with a dear colleague and she asked if I also had pens with a flexible nib. Posing such a question usually requires some basic knowledge about types of nibs, and it turned out that her friend is another fountain pen enthusiast who owns a bunch of really neat looking (and writing) pens. I was very excited when she proposed to let me try some of his special nibs.</description>
    </item>
    
    <item>
      <title>Journaling in practice</title>
      <link>https://brainbaking.com/post/journaling-in-practice/</link>
      <pubDate>Mon, 10 Jul 2017 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/journaling-in-practice/</guid>
      <description>If you&amp;rsquo;re wondering why you should journal in the first place, then maybe it&amp;rsquo;s a good idea to start reading here and here.
There are hundreds of resources available on the Internet on how to journal, how to keep a bullet journal, how to index everything, how to getting things done and so forth. The following advice is something that works for me - it might not work for you at all.</description>
    </item>
    
    <item>
      <title>Nuts about local nuts</title>
      <link>https://brainbaking.com/post/nuts-about-local-nuts/</link>
      <pubDate>Mon, 03 Jul 2017 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/nuts-about-local-nuts/</guid>
      <description>Remembering David Lebovitz&amp;rsquo; pine nut syndrome, I started to take a closer look at packages of food we buy at the local supermarket. It&amp;rsquo;s so easy to get completely focused on buying local vegetables but forgetting to look at the label when throwing something like pine nuts into the shopping cart. The worst thing is, most supermarkets don&amp;rsquo;t care and don&amp;rsquo;t offer an alternative. However, let&amp;rsquo;s not panic just yet: this is slowly changing (but reached a plateau).</description>
    </item>
    
    <item>
      <title>Healing creative scars</title>
      <link>https://brainbaking.com/post/healing-creative-scars/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/healing-creative-scars/</guid>
      <description>Want to skip to the practical part?
Are you aware of your problems? Once upon a time in a land not very far away (in fact, it&amp;rsquo;s the very same we live in), a small boy and his Gameboy grew up. He didn&amp;rsquo;t have many hobbies: gaming. He didn&amp;rsquo;t have many friends. Playing outside is okay as long as the 4 AA batteries are fully charged and the sun isn&amp;rsquo;t shining too bright and the playing is confined to one square meter.</description>
    </item>
    
    <item>
      <title>A samurai learning mindset</title>
      <link>https://brainbaking.com/post/a-samurai-learning-mindset/</link>
      <pubDate>Tue, 20 Jun 2017 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/a-samurai-learning-mindset/</guid>
      <description>After reading the famed books The Book of five rings By Miyamoto Musashi and the Life-giving sword By Yagyu Munenori, I started making connections between the teachings of the art of war and the teachings of any other craft. Yagyu clearly mentions the state of mind required to survive in battle can be used in any other profession to your advantage as well.
The back of the book states that &amp;ldquo;every manager, seeker of life wisdom and practician of martial arts should use this&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Development principles in cooking</title>
      <link>https://brainbaking.com/post/development-principles-in-cooking/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/development-principles-in-cooking/</guid>
      <description>A lot of people seem to think I&amp;rsquo;m the kind of chef who uses loads and loads of ingredients, combining and layering without thinking twice. We were having a discussion about what to cook for dinner this evening. It&amp;rsquo;s &amp;lsquo;donderdag veggiedag&amp;rsquo;, an initiative from the Belgian EVA VZW to eat a vegetarian meal each thursday, and since I&amp;rsquo;m a vegetarian, it&amp;rsquo;s generally accepted that I should know a lot of good recipes.</description>
    </item>
    
    <item>
      <title>Are you handing over enough when inspiring someone?</title>
      <link>https://brainbaking.com/post/handing-over-enough-when-inspiring/</link>
      <pubDate>Tue, 30 May 2017 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/handing-over-enough-when-inspiring/</guid>
      <description>The other day, I was having a discussion with a friend and colleague about reaching out to others. He had an idea on combining patterns learned from the enterprise software development world (clean code, TDD, domain driven design, you name it) with patterns learned from the gaming development world (rapid prototyping, getting stuff done, intensive usage of frameworks like Unity). An excellent idea if you ask me. But he was hesitant - others might not be that interested in taking time to write unit tests in their game.</description>
    </item>
    
    <item>
      <title>How to teach kids to program</title>
      <link>https://brainbaking.com/post/teaching-kids-how-to-program/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/teaching-kids-how-to-program/</guid>
      <description>Jessica Ellis gave a lot of great tips on how to teach kids to program at Techorama 2017 in Antwerp. She has ben an active teacher in the tkplabs.org society and introduced something clever called &amp;ldquo;barbecoding&amp;rdquo;. In an attempt to create an appealing programming camp for boys and girls, she successfully combined food and science. She shared her story in an hour and I did my best to extract the most important principles as I thought it might be a great idea to apply that to our team in my daily work as a software developer.</description>
    </item>
    
    <item>
      <title>Teaching yourself to draw</title>
      <link>https://brainbaking.com/post/teaching-yourself-to-draw/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/teaching-yourself-to-draw/</guid>
      <description>Inspired by Noah Bradley&amp;rsquo;s Don&amp;rsquo;t go to art school blog at Medium.com.
Drawing and art in general has always been something I didn&amp;rsquo;t quite grasp or try to understand. I was a software development guy, a technical guy, used to writing code, looking at text, spending days and years in text editors others call IDE&amp;rsquo;s. Software development and art aren&amp;rsquo;t that different actually: they both require an open mindset and an extreme creative approach at solving problems.</description>
    </item>
    
    <item>
      <title>Unit testing in Legacy Projects: VB6</title>
      <link>https://brainbaking.com/post/vb6-unit-testing/</link>
      <pubDate>Tue, 27 Dec 2016 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/vb6-unit-testing/</guid>
      <description>Thanks to the Postmodern VB6 article I&amp;rsquo;ve found on the internetz, I decided to give SimplyVBUnit a try. My job requires sporadic visual basic 6 code changes in the big legacy project we&amp;rsquo;re converting to C#. It&amp;rsquo;s an administrative system bound to Belgium laws so as you can imagine they change every few months and the old software still has to be complaint to those crazy new rules. As a result, we sometimes dabble in VB6 code.</description>
    </item>
    
    <item>
      <title>Migrating from Extjs to React gradually</title>
      <link>https://brainbaking.com/post/react-in-extjs/</link>
      <pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/react-in-extjs/</guid>
      <description>We were looking for a few alternatives to our big ExtJS 4 application. Since it&amp;rsquo;s not that easy to completely migrate from one front-end framework to the next, a possible solution would be to start developing new parts in another framework. There&amp;rsquo;s a lot of domain logic spread in Ext views and controllers - which shouldn&amp;rsquo;t be there, we are well aware of that. Let&amp;rsquo;s call it &amp;ldquo;legacy&amp;rdquo; :-)
The application right now uses Extjs as UI and C# as backend, and lets ext do the loading of the views/controllers (living in app.</description>
    </item>
    
    <item>
      <title>Webdriver Exception Handling</title>
      <link>https://brainbaking.com/post/webdriver-exception-handling/</link>
      <pubDate>Wed, 14 Jan 2015 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/webdriver-exception-handling/</guid>
      <description>As the previous post indicated, we&amp;rsquo;re trying to stabilize our scenario tests created with WebDriver. One of the things we did was trying to capture as much data as possible if something goes wrong. Something like a typical ElementNotFoundException, or the less common StaleElementException (detached from DOM after evaluation) - these things can be hard to trace if you don&amp;rsquo;t run the tests locally. We also stumbled upon the &amp;ldquo;it works on my machine&amp;rdquo; problem - tests succeeding on one development machine but not on the other - mostly related due to timing issues.</description>
    </item>
    
    <item>
      <title>Unit Testing Extjs UI with Siesta</title>
      <link>https://brainbaking.com/post/unit-testing-extjs-ui/</link>
      <pubDate>Tue, 23 Dec 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/unit-testing-extjs-ui/</guid>
      <description>WebDriver &amp;amp; js-heavy frameworks Writing scenario tests for javascript-heavy UI webpages can be really difficult. It gets complicated pretty quickly if you&amp;rsquo;re using a lot of async calls or a lot of javascript-heavy UI components. On our current project, we use Extjs as the UI layer in a single-page aspx page to bootstrap our Extjs app. Extjs is a (heavyweight) javascript framework for creating windows, panels, grids, buttons, menus, &amp;hellip; like you&amp;rsquo;re used to when using client/server desktop applications.</description>
    </item>
    
    <item>
      <title>.NET Memory management VS JVM Memory management</title>
      <link>https://brainbaking.com/post/memory-management-vs-java/</link>
      <pubDate>Fri, 24 Oct 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/memory-management-vs-java/</guid>
      <description>Memory management is something to keep in mind when deploying and running applications on top of the JVM. Parameters like Xmx and Xms are things to juggle with when it comes to finding the perfect balance between too much memory hogging (at app startup) and too little, especially if you&amp;rsquo;re working with heavy duty entity mapping frameworks like Hibernate (and you&amp;rsquo;re not so good at writing fast HQL). When we bumped into an OutOfMemoryException in .</description>
    </item>
    
    <item>
      <title>Faking domain logic</title>
      <link>https://brainbaking.com/post/faking-domain-logic/</link>
      <pubDate>Tue, 23 Sep 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/faking-domain-logic/</guid>
      <description>Sometimes, life is just a little bit more difficult than you imagined the day before. Sometimes, you have to work on a legacy codebase with custom frameworks rooted so deeply you&amp;rsquo;re having lot&amp;rsquo;s of trouble trying to build around them. To make it a bit more concrete, here&amp;rsquo;s an example: imagine a separate DLL for interfaces and a separate DLL for the implementation. This decision was made because we use NHibernate as a data mapper and not to write beautiful domain driven design code.</description>
    </item>
    
    <item>
      <title>Custom Webdriver Page Factories</title>
      <link>https://brainbaking.com/post/custom-webdriver-page-factories/</link>
      <pubDate>Mon, 22 Sep 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/custom-webdriver-page-factories/</guid>
      <description>The problem: Webdriver elements returned by driver.FindElement() are too generic. There&amp;rsquo;re the Text, SendKeys() and Click() methods/properties (depending your on C#/Java implementation). The solution is to simply wrap all elements inside custom HTML objects which contain specific methods like ShouldContainValue or Type (okay, that&amp;rsquo;s a one-to-one mapping with SendKeys(), but it&amp;rsquo;s a lot less technical!). Instead of
 [FindsBy(How = How.CssSelector, Using = &amp;quot;.ux-desktop-taskbar-startbutton&amp;quot;)] private IWebElement startButton; [FindsBy(How = How.CssSelector, Using = &amp;quot;.</description>
    </item>
    
    <item>
      <title>Bye autotools hello Scons</title>
      <link>https://brainbaking.com/post/scons-building/</link>
      <pubDate>Wed, 26 Mar 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/scons-building/</guid>
      <description>Remember this?
 ./configure make make install  That&amp;rsquo;s not so bad, as long as you have the right compiler and linker flags configured, depending on the target OS. The real problem, however, is trying to figure out how to alter something if you didn&amp;rsquo;t write the Makefile yourself. Or if you in fact did write it, but it was some time ago. Two days. No, four hours.
The problem Try to study the autoconf and automake flow diagram, explained on Wikipedia: the GNU build system.</description>
    </item>
    
    <item>
      <title>Metaprogramming instead of duplication</title>
      <link>https://brainbaking.com/post/metaprogramming-convention-dry/</link>
      <pubDate>Fri, 14 Mar 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/metaprogramming-convention-dry/</guid>
      <description>So&amp;hellip; What&amp;rsquo;s up with all that duplication in your unit tests? Let&amp;rsquo;s take a look at a very recognizable pattern when for instance using RhinoMock in C#:
 [TestInitialize] public void SetUp() { dbConfigurationMock = MockRepository.GenerateMock&amp;lt;IDbConfiguration&amp;gt;(); mountPointLoaderMock = MockRepository.GenerateMock&amp;lt;IMountPointLoader&amp;gt;(); userEnvironmentFactoryMock = MockRepository.GenerateMock&amp;lt;IUserEnvironmentFactory&amp;gt;(); userEnvironmentLoaderMock = MockRepository.GenerateMock&amp;lt;IUserEnvironmentLoader&amp;gt;(); // ...  We agreed to suffix each instance variable with &amp;lsquo;Mock&amp;rsquo; if it&amp;rsquo;s a mock. That way, when you scroll down to an actual test case, it&amp;rsquo;s clear to everyone what&amp;rsquo;s what: mocks, stubs, actual implementations, and so forth.</description>
    </item>
    
    <item>
      <title>Enhancing the builder pattern with closures</title>
      <link>https://brainbaking.com/post/builders-dsl/</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/builders-dsl/</guid>
      <description>This post is inspired by Venkat Subramaniam&amp;rsquo;s Devoxx 2013 talk Thinking Functional Style. See downloads at agiledeveloper.com which has a rather cool Groovy example.
Classic builders For years, I&amp;rsquo;ve been using the builder pattern to quickly create new objects to be inserted into the database or to inject our domain objects with the required data. We started with so called &amp;ldquo;Object Mothers&amp;rdquo;, static methods which simply create and fill up an object, passing in a huge amount of parameters.</description>
    </item>
    
    <item>
      <title>Integration Testing with SQLite</title>
      <link>https://brainbaking.com/post/integration-testing-sqlite/</link>
      <pubDate>Mon, 04 Nov 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/integration-testing-sqlite/</guid>
      <description>This article is based on the notes I&amp;rsquo;ve collected on My Wiki.
On previous projects I&amp;rsquo;ve worked on, development PCs came with a local version of the database scheme. Each DB change also got rolled out to those computers, which enabled us developers to fool around without breaking anything on the development (or test) environment. This is another step closer to happiness, at least for our proxy customers who didn&amp;rsquo;t have to reinsert their test data every time we flushed something from a table.</description>
    </item>
    
    <item>
      <title>Visual Studio 2012 for Eclipse users</title>
      <link>https://brainbaking.com/post/vstudio-missing-features/</link>
      <pubDate>Mon, 14 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/vstudio-missing-features/</guid>
      <description>When switching over to a new editor and new language, I can sometimes get frustrated by missing features I got (very) attached to. This excludes the obvious difference in shortcut keys.
Shortcuts and refactoring tools One plugin to rule them all: ReSharpner. This productivity tool brings back the incredible development speed to the Visual Studio platform. You can almost map the eclipse (or IntelliJ, since they guys from JetBrains developed it) keys to the ReSharpner keys.</description>
    </item>
    
    <item>
      <title>Learning to become a baker</title>
      <link>https://brainbaking.com/post/learning-to-become-a-baker/</link>
      <pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/learning-to-become-a-baker/</guid>
      <description>Originally posted on Medium.
Addendum Red Zuurdesem, my website about baking with sourdough, has been active since 2012, and still is. I hold a professional bread baker&amp;rsquo;s degree since 2016 - this article was written during the first year when I enrolled in the course.
 Sometimes people tell me I’m obsessed with bread. That’s not entirely my fault. (I like to blame others, who doesn’t?) When I was little, my father always baked our own bread on sunday, every single sunday.</description>
    </item>
    
    <item>
      <title>Unit Testing Stored Procedures</title>
      <link>https://brainbaking.com/post/unit-testing-stored-procedures/</link>
      <pubDate>Thu, 10 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/unit-testing-stored-procedures/</guid>
      <description>This article is based on the notes I&amp;rsquo;ve collected on My Wiki.
Test Driven Development (or TDD), it&amp;rsquo;s one of those buzz words which usuallly appear in the same sentence with &amp;ldquo;scrum&amp;rdquo; or &amp;ldquo;XP&amp;rdquo;. But in practice, I&amp;rsquo;ve seen few people actually applying it all the way through. What do I mean by that? You&amp;rsquo;re probably very familiar with, say Java or .NET, and you know how to write unit tests in that language using your beloved IDE.</description>
    </item>
    
    <item>
      <title>A look at dynamic languages</title>
      <link>https://brainbaking.com/post/dynamic-languages/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/dynamic-languages/</guid>
      <description>Dynamic Languages: Constructs vergelijken Deze pagina vergelijkt verschillende dynamische talen in een poging om een overzicht te maken tussen de alsmaar groeiende lijst. De meest gebruikte features van zulke talen worden hieronder opgelijst.
Het verschil tussen MOPs en Prototypal inheritance ❗ Javascript heeft géén Meta Object Protocol (MOP) dat de taal dynamisch maakt, maar bouwt verder op prototypes. Dat wil zeggen dat het klassieke inheritance systeem niet bestaat in Javascript, maar wel nagebootst kan worden door objecten te laten afleiden van objecten.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Basics</title>
      <link>https://brainbaking.com/post/cplusplus-basics/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/cplusplus-basics/</guid>
      <description>Scope C++ heeft block level scope, net als Java, alleen is het mogelijk om een variabele binnen een for loop dezelfde naam te geven als een die buiten die block gedefiniëerd is, terwijl dat in Java niet gaat:
int j; for(int i = 0; i &amp;lt; 10; i++) { int j = i + 1; // compile fout in java }  Pointer scope auto_ptr kan gebruikt worden om een pointer automatisch te verwijderen met delete wanneer deze scope verliest - alle andere zaken moet je zelf opkuisen.</description>
    </item>
    
    <item>
      <title>Heavily used Unix Commands</title>
      <link>https://brainbaking.com/post/unix-cmd/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/unix-cmd/</guid>
      <description>Binaries zoeken Kan met whereis, maar die zoekt blijkbaar niet in &amp;ldquo;alle&amp;rdquo; binary dirs - enkel degene die geconfigureerd zijn onder:
sysctl user.cs_path # output: user.cs_path = /usr/bin:/bin:/usr/sbin:/sbin  Shell automatisation Command-line programs feeden kan met het expect tooltje. Bijvoorbeeld, bij het aanloggen in ssh moet je daarna een wachtwoord geven en op enter drukken dat niet als commandline argument meegegeven kan worden. Dit kan je dan zo forceren:</description>
    </item>
    
    <item>
      <title>Introduction to JavaScript</title>
      <link>https://brainbaking.com/post/introduction-to-js/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/introduction-to-js/</guid>
      <description>Javascript Inleiding Primitives Soorten In javascript zijn er slechts 3 primitives:
 string (geassocieerd object: String) boolean (geassocieerd object: Boolean) number (geassocieerd object: Number)  Primitives zijn immutable! Toekennen van properties maakt ook een tijdelijk object aan, dus dit heeft geen nut.
Soort afchecken Aangezien JS loosely typed is, kunnen we nooit weten wat er nu in var variabele; steekt op een bepaald moment in de code. Om dit op te lossen kan men typeof gebruiken, een functie die een string teruggeeft wat het type van die variabele is.</description>
    </item>
    
    <item>
      <title>Python Class structure basics</title>
      <link>https://brainbaking.com/post/python-basics/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/python-basics/</guid>
      <description>Handy links:
 special class methods like _ getattr _ and _ new _ dive into python - native datatypes Inside story on new style classes - ter info: Python3 heeft enkel &amp;ldquo;newstyle&amp;rdquo; classes!  Method overriding Is niet mogelijk. Gebruik default values!
def func(i, j = 2, k 3): return i + j + k func(1) # 6 func(1, 1) # 5 func(1, 1, 1) # 3  Wat wel gaat, evt met decorators, zie Five-minute multimethods in Python - is __call__ implementeren en dan met metaprogrammeren te loopen over alle methods en te kijken of de argumenten overeen komen met het type dat required is.</description>
    </item>
    
    <item>
      <title>Ruby Class structures basics</title>
      <link>https://brainbaking.com/post/ruby-classes/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/ruby-classes/</guid>
      <description>Ruby Classes Closures and lambda&amp;rsquo;s Weer 4 verschillende mogelijkheden in Ruby, zie Proc and Lambda in Ruby
Native &amp;ldquo;blocks&amp;rdquo; aanmaken Is niet mogelijk. a = { puts &amp;quot;hello&amp;quot; } geeft een Syntax error; dit moet effectief met Proc.new gebeuren.
Lambdas aanmaken Kan ook weer op twee manieren:
a = lambda { puts &amp;quot;hello&amp;quot; } b = -&amp;gt; { puts &amp;quot;hello&amp;quot; }  Blocks als argumenten doorgeven Wordt slechts één aanvaard, Procs zijn objecten en kan dus op eender welke manier.</description>
    </item>
    
    <item>
      <title>Scheme tips and tricks</title>
      <link>https://brainbaking.com/post/scheme/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/scheme/</guid>
      <description>Variable arguments Bron: http://www.cs.utexas.edu/ftp/garbage/cs345/schintro-v14/schintro_68.html
(define (stack . args) (display args)) (define (plus a b) (stack a b) (+ a b)) (plus 1 2)  Print in een lijst (1 2) af. In scheme is het mogelijk om args op te splitsen, alles dat na de &amp;ldquo;.&amp;rdquo; komt, wordt samengenomen als een lijst in een speciale variabele die de rest van de argumenten binnen pakt. Je kan dus ook x aantal argumenten &amp;ldquo;vast&amp;rdquo; zetten en de rest laten opvangen door een lijst.</description>
    </item>
    
    <item>
      <title>No, vegetarians do not eat fish!</title>
      <link>https://brainbaking.com/post/no-vegetarians-do-not-eat-fish/</link>
      <pubDate>Fri, 06 Sep 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/no-vegetarians-do-not-eat-fish/</guid>
      <description>Originally posted on Medium.
The amateurs  “So, you do eat a juicy peace of grilled salmon, right?” “No, I already told you, I’m a vegetarian.” (sigh) Frowning. You can almost hear them thinking “that’s what I meant”. “If you’re a pescatarian, you eat seafood but not other animals”. “Oh, right right, sorry!”.
 It must have been the fourth conversation with somebody, where I have to explain what “being a vegetarian” actually means.</description>
    </item>
    
    <item>
      <title>On finding your inner zen in big cities</title>
      <link>https://brainbaking.com/post/on-finding-your-inner-zen-in-big-cities/</link>
      <pubDate>Thu, 29 Aug 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/on-finding-your-inner-zen-in-big-cities/</guid>
      <description>Originally posted on Medium.
There have been a lot of love letters to big cities here on Medium recently. I never really understood the love for those busy places, but that should not be a big surprise as we grew up in a relatively small village in Belgium. Our country must be one of the smallest in the world — you can drive from one edge to the other in less than 2 hours (excluding traffic jams of course).</description>
    </item>
    
    <item>
      <title>Ending your day with happy thoughts</title>
      <link>https://brainbaking.com/post/can-i-haz-happy-thoughts/</link>
      <pubDate>Tue, 13 Aug 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/can-i-haz-happy-thoughts/</guid>
      <description>Past new year, I stopped promising silly things to myself. “This year, I’ll for sure go jogging several times a week!” — or “This year, I’ll really get into learning another language!”. We all know how these things go. Not that I made something up on the very day, these ideas are usually carefully crafted in my sketchbook and are lingering there to be exposed and finally executed.  Originally posted on Medium.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://brainbaking.com/sigcse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/sigcse/</guid>
      <description>    Redirecting to https://brainbaking.com/teaching/cpp/sigcse2020/...  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://brainbaking.com/teaching/cpp/slides-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/slides-1/</guid>
      <description>document.write( &#39;&#39; );  mermaid.initialize({ startOnLoad: true, flowchart: { useMaxWidth: true } });          Reveal.initialize({ width: 960, height: 700, controls: true, progress: true, history: true, transition: &#39;fade&#39;, center: true, slideNumber: true, theme: Reveal.getQueryHash().theme, dependencies: [ { src: &#39;https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.3.0//lib/js/classList.js&#39;, condition: function() { return !document.body.classList; } }, { src: &#39;https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.3.0//plugin/markdown/marked.js&#39;, condition: function() { return !!document.querySelector( &#39;[data-markdown]&#39; ); } }, { src: &#39;https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.3.0//plugin/markdown/markdown.js&#39;, condition: function() { return !</description>
    </item>
    
    <item>
      <title></title>
      <link>https://brainbaking.com/teaching/cpp/slides-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/slides-2/</guid>
      <description>document.write( &#39;&#39; );  mermaid.initialize({ startOnLoad: true, flowchart: { useMaxWidth: true } });          Reveal.initialize({ width: 960, height: 700, controls: true, progress: true, history: true, transition: &#39;fade&#39;, center: true, slideNumber: true, theme: Reveal.getQueryHash().theme, dependencies: [ { src: &#39;https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.3.0//lib/js/classList.js&#39;, condition: function() { return !document.body.classList; } }, { src: &#39;https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.3.0//plugin/markdown/marked.js&#39;, condition: function() { return !!document.querySelector( &#39;[data-markdown]&#39; ); } }, { src: &#39;https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.3.0//plugin/markdown/markdown.js&#39;, condition: function() { return !</description>
    </item>
    
    <item>
      <title></title>
      <link>https://brainbaking.com/teaching/cpp/slides-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/slides-3/</guid>
      <description>document.write( &#39;&#39; );  mermaid.initialize({ startOnLoad: true, flowchart: { useMaxWidth: true } });          Reveal.initialize({ width: 960, height: 700, controls: true, progress: true, history: true, transition: &#39;fade&#39;, center: true, slideNumber: true, theme: Reveal.getQueryHash().theme, dependencies: [ { src: &#39;https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.3.0//lib/js/classList.js&#39;, condition: function() { return !document.body.classList; } }, { src: &#39;https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.3.0//plugin/markdown/marked.js&#39;, condition: function() { return !!document.querySelector( &#39;[data-markdown]&#39; ); } }, { src: &#39;https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.3.0//plugin/markdown/markdown.js&#39;, condition: function() { return !</description>
    </item>
    
    <item>
      <title></title>
      <link>https://brainbaking.com/teaching/cpp/slides-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/slides-4/</guid>
      <description>document.write( &#39;&#39; );  mermaid.initialize({ startOnLoad: true, flowchart: { useMaxWidth: true } });          Reveal.initialize({ width: 960, height: 700, controls: true, progress: true, history: true, transition: &#39;fade&#39;, center: true, slideNumber: true, theme: Reveal.getQueryHash().theme, dependencies: [ { src: &#39;https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.3.0//lib/js/classList.js&#39;, condition: function() { return !document.body.classList; } }, { src: &#39;https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.3.0//plugin/markdown/marked.js&#39;, condition: function() { return !!document.querySelector( &#39;[data-markdown]&#39; ); } }, { src: &#39;https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.3.0//plugin/markdown/markdown.js&#39;, condition: function() { return !</description>
    </item>
    
    <item>
      <title>Dependency Management</title>
      <link>https://brainbaking.com/teaching/ses/dependency-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/dependency-management/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
Lees ook: Meer uitleg over de Gradle build tool.
Wat is een &amp;lsquo;dependency&amp;rsquo;? Een dependency, of afhankelijkheid, is een externe bibliotheek die wordt gebruikt tijdens de ontwikkeling van een toepassing. Tijdens het vak &amp;lsquo;Software ontwerp in Java&amp;rsquo; zijn reeds de volgende externe libraries gebruikt:
 JavaFX Google Gson JUnit  Het vertrouwen op zo&amp;rsquo;n library houdt in dat een extern bestand, zoals een .</description>
    </item>
    
    <item>
      <title>Een introductie in C(&#43;&#43;) Build Systemen</title>
      <link>https://brainbaking.com/teaching/cpp/buildsystems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/buildsystems/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software ontwerp in C/C++
Zie ook labo 1: (herhaaldelijk) compileren
Een greep uit de mogelijkheden, schematisch samengevat:
mermaid.initialize({ startOnLoad: true, flowchart: { useMaxWidth: true } });  graph LR; compiler[compiler rechtstreeks uitvoeren] make[Makefiles roepen compiler aan] scons[SCons files roepen compiler aan] cmake[CMake files genereren Makefiles] qmake[QMake files genereren Makefiles] shell[Eigen script roept compiler aan] qmake -- make cmake -- make scons -- compiler make -- compiler shell -- compiler  Hoe compileer ik één file?</description>
    </item>
    
    <item>
      <title>Een introductie tot design patterns</title>
      <link>https://brainbaking.com/teaching/ses/patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/patterns/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills
Wat is dat, een patroon? Patronen zijn voor het mensenlijk brein eenvoudig herkenbaar: we zien stukjes van iets die we al eens ergens anders gezien hebben. Blokjes op een bepaalde manier ingekleurd, gehaakte patroontjes van een dekbed, Fibonacci spiralen in bloemblaadjes en zaadjes, &amp;hellip; Wanneer we programmeren, geldt dit principe ook: blokken code die herbruikt worden om eenvoudige oplossingen te bieden voor complexe problemen.</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://brainbaking.com/teaching/cpp/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/faq/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software ontwerp in C/C++
Neem ook eens een kijkje bij de Installatieinstructies!
MinGW installatie problemen Error RES Fout op Win omgevingen Zie ook https://sourceforge.net/p/mingw-w64/bugs/413/ - &amp;lsquo;oplossing&amp;rsquo; is een aantal keer hetzelfde bestand opnieuw te proberen downloaden &amp;amp; installeren. Antivirus die moeilijk doet kan ook een probleem zijn.
Problemen met build omgevingen SH.exe was found in your path Fout:
 sh.exe was found in your PATH, here: C:/Program Files/Git/user/bin/sh.</description>
    </item>
    
    <item>
      <title>Gebruikte Software</title>
      <link>https://brainbaking.com/teaching/ses/software/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/software/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills
Voor deze cursus werken we met Java en met Git. Dat betekent dat een JDK (en de Gradle build tool) en een Git client de enige vereisten zijn.
Onderstaande lijst kan helpen bij het installeren en configureren van zulke tools:
Commandline Tools  git-scm gradle  Om vlot met unix-like command lines te werken op een Windows machine, raden we één van de volgende toolchain aan:</description>
    </item>
    
    <item>
      <title>Hi, I’m Wouter Groeneveld</title>
      <link>https://brainbaking.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/about/</guid>
      <description>And I have a deep passion to inspire others on everything that drives me. I like to think of myself as one of those polymaths or Rennaissance Men:
 Renaissance man (noun) - a person with many talents or areas of knowledge.1
 Professionally, I am a PhD researcher at the Faculty of Engineering Technology, KU Leuven. I have been an experienced software engineer for 11 years before that, taking on various roles from agile coaching to technical lead.</description>
    </item>
    
    <item>
      <title>Installatieinstructies op Linux</title>
      <link>https://brainbaking.com/teaching/cpp/installaties/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/installaties/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software ontwerp in C/C++
Onderstaande instructies gaan uit van Ubuntu als besturingssysteem. Windows of OSX is ook mogelijk, alle tools zijn platformonafhankelijk. Voor Windows installeer je MinGW 64 als compiler toolchain.
Basisvereisten De volgende tools worden verwacht geïnstalleerd te worden via de package tool apt-get bij Ubuntu:
 build-essential als gcc/g++ build tools (preinstalled?) git  Optionele editors (VSCode, Subl) zijn ook via de package tool te installeren.</description>
    </item>
    
    <item>
      <title>Java Gradle projecten</title>
      <link>https://brainbaking.com/teaching/ses/gradle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/gradle/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills
Helps teams build, automate and deliver better software, faster. Tenminste, toch volgens de gradle.org website.
Wat is dat, een build tool? Gradle is een build tool die de automatisatie van releasen, builden, testen, configureren, dependencies en libraries managen, &amp;hellip; eenvoudiger maakt. Kort gezegd: het maakt het leven van een ontwikkelaar eenvoudiger. In een config bestand genaamd build.gradle schrijft men met Groovy, een dynamische taal bovenop de JVM, op een descriptieve manier hoe Gradle de applicatie moet beheren.</description>
    </item>
    
    <item>
      <title>Labo 10: Een introductie in GUI ontwerp met C&#43;&#43; in Qt</title>
      <link>https://brainbaking.com/teaching/cpp/labo-10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/labo-10/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software ontwerp in C/C++ &amp;raquo;&amp;nbsp;Naar de labo opgave
UI Frameworks De C++ taal is een krachtige tool om native code te compileren voor specifieke CPU en OS systemen. Daardoor is het ook vaak een logische keuze om complexe interfaces in te ontwerpen en ontwikkelen, van Photoshop tot Google Chrome. Interfaces brengen echter weer andere problemen met zich mee: elk besturingssysteem heeft ondertussen zijn eigen interpretatie.
De Windows standaard was MFC die de WinAPI wrapt, voor OSX was dit de Carbon API.</description>
    </item>
    
    <item>
      <title>Labo 11: een GBA spel porten naar Qt</title>
      <link>https://brainbaking.com/teaching/cpp/labo-11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/labo-11/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software ontwerp in C/C++ &amp;raquo;&amp;nbsp;Naar de labo opgave
Eigen widgets implementeren De objectenboom uit labo 10 leert ons dat heel wat Qt objecten afleiden van QWidget. Dat is de ideale startplaats om zelf een widget te implementeren. Veel Qt objecten voorzien een override om het tekenen zelf af te kunnen handelen, vergelijkbaar met de while loop in een typisch gameboy spel.
void paintEvent(QPaintEvent *event) override;  In het Textrix Qt Voorbeeld wordt er gebruikt gemaakt van custom QFrame en QWidget implementaties die eigen objecten bijhouden die de tetris blokken voorstellen.</description>
    </item>
    
    <item>
      <title>Labo 1: Classificaties, gedrag en beschrijvingen</title>
      <link>https://brainbaking.com/teaching/java/labo-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/java/labo-1/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software ontwerp in Java &amp;raquo;&amp;nbsp;Naar de labo opgave
Classificaties van een ontdekkingsreiziger Om tot de definitie van een Class - al dan niet in een programmeertaal als Java - te bekomen, denken we even terug naar classificaties waar het woord &amp;ldquo;class&amp;rdquo; ook in terug komt. Stel je voor dat je Charles Darwin bent, met het schip The Beagle op ontdekkingsreis doorheen de wereld. In je reizen kom je verschillende vreemde, tot nu toe ongekende wezens tegen, die je op een of andere ingenieuze wijze tracht op te delen in verschillende categorieën - of classificaties.</description>
    </item>
    
    <item>
      <title>Labo 1: Introductie in C</title>
      <link>https://brainbaking.com/teaching/cpp/labo-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/labo-1/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software ontwerp in C/C++ &amp;raquo;&amp;nbsp;Naar de labo opgave
De C programmeertaal De C taal is een programmeertaal in de jaren &amp;lsquo;70 ontwikkeld om makkelijk hardware te kunnen aanspreken. C was/is in essentie niet veel meer dan een kleine abstractielaag bovenop assembly.
C is een imperatieve programmeertaal. Dat zal je bij het oefenen wel merken: we schrijven instructies als statements. Deze regels of statements zijn gestructureerd in functies en struct types.</description>
    </item>
    
    <item>
      <title>Labo 2: Pointers in C en C&#43;&#43;</title>
      <link>https://brainbaking.com/teaching/cpp/labo-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/labo-2/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software ontwerp in C/C++ &amp;raquo;&amp;nbsp;Naar de labo opgave
In onderstaande schematische voorbeelden zijn de volgende concepten expliciet te onderscheiden:
 Een naam van een variabele Een waarde van een variabele  En de volgende impliciet:
 Het type van een variabele Het adres van een variabele  Het type van een variabele bepaalt de hoeveelheid geheugen die vrijgemaakt wordt om de waarde te kunnen bewaren. De waarde is ofwel een actuele waarde ofwel een adres dat refereert naar een andere waarde.</description>
    </item>
    
    <item>
      <title>Labo 3: Introductie in GBA Programming</title>
      <link>https://brainbaking.com/teaching/cpp/labo-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/labo-3/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software ontwerp in C/C++ &amp;raquo;&amp;nbsp;Naar de labo opgave
Je hebt nu een crashcrusus C achter de kiezen met een grondige focus op pointers. Hoog tijd om die kennis om te zetten in iets concreet én plezant. We gaan een héél simpel Gameboy Advance (GBA) spel ontwikkelen.
De GBA is een goede keuze om de kracht (en zwakheden) van C te demonstreren. Er is immers géén besturingsyssteem aanwezig. Er zijn géén libraries aanwezig voor memory management, IO, files, error handling, &amp;hellip; Het is een embedded hardware systeem dat een cross-compiler vereist: een compiler op onze PC&amp;rsquo;s dat compileert voor een ander platform en CPU, namelijk een 32-bit ARM op 16.</description>
    </item>
    
    <item>
      <title>Labo 4: GBA Tilesets, een simpel spel</title>
      <link>https://brainbaking.com/teaching/cpp/labo-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/labo-4/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software ontwerp in C/C++ &amp;raquo;&amp;nbsp;Naar de labo opgave
In labo 3 maakten we kennis met de Gameboy Advance en het ontwikkelplatform - als je het zo kan noemen. We gebruikten mode 3 om pixels te manipuleren. Natuurlijk is dat erg onpraktisch en veel te belastend wanneer er veel op het scherm getekend moet worden. Als doelstelling voor labo 4 willen we een simpel geïntegreerd spelletje maken waar we video mode 1 en tilesets voor nodig hebben.</description>
    </item>
    
    <item>
      <title>Labo 5: Weg met C, Hallo C&#43;&#43;</title>
      <link>https://brainbaking.com/teaching/cpp/labo-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/labo-5/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software ontwerp in C/C++ &amp;raquo;&amp;nbsp;Naar de labo opgave
De ++ in C++ De introductie van C++ in 1985 geeft de ervaren C programmeur enkele extra mogelijkheden om zijn of haar code te structureren. C++ wordt nog steeds omschreven als een &amp;ldquo;general purpose&amp;rdquo; low-level taal op Wikipedia:
 C++ is a general-purpose programming language. It has imperative, object-oriented and generic programming features, while also providing facilities for low-level memory manipulation.</description>
    </item>
    
    <item>
      <title>Labo 6: C&#43;&#43; Class Inheritance, operators en templates</title>
      <link>https://brainbaking.com/teaching/cpp/labo-6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/labo-6/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software ontwerp in C/C++ &amp;raquo;&amp;nbsp;Naar de labo opgave
C++ Classes revisited Nu je een basis van klassen hebt opgedaan in C++ gaan we erving introduceren. Gegeven de volgende modellen:
mermaid.initialize({ startOnLoad: true, flowchart: { useMaxWidth: true } });  graph TD; A[Dier] B[Viervoeter] C[Hond] D[Kat] E[Vlinder] F[Vlees] G[Groenten] H[Voedsel] B -- A C -- B D -- B E -- A F -- H G -- H  Gegeven de volgende acceptatie criteria:</description>
    </item>
    
    <item>
      <title>Labo 7: Software ontwerpen</title>
      <link>https://brainbaking.com/teaching/cpp/labo-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/labo-7/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software ontwerp in C/C++ &amp;raquo;&amp;nbsp;Naar de labo opgave
Een programmeertaal als C++ leren vereist het achteroverslaan van heel wat syntaxtische cryptologie als decltype(), template&amp;lt;typename T&amp;gt; en *(x-&amp;gt;o). Met programmeren alleen kom je er echter niet: software ontwerpen vereist heel wat meer inzicht dan de juiste code op de juiste plaats typen.
Software Modelleren Als software ontwikkelaar ben jij de uitvoerende kracht die vereisten van de klant implementeert in het software systeem.</description>
    </item>
    
    <item>
      <title>Labo 8: GBA Programming in C&#43;&#43;: een abstractielaag</title>
      <link>https://brainbaking.com/teaching/cpp/labo-8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/labo-8/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software ontwerp in C/C++ &amp;raquo;&amp;nbsp;Naar de labo opgave
Het zal je ondertussen wel al duidelijk zijn dat technische details zoals IO pointers en OAM vanuit labo 4 de code er niet bepaald duidelijker op maken. Jammer genoeg voorziet de GBA geen andere mogelijkheden. Een oplossing zal van de ontwikkelaar zelf moeten komen, in de vorm van de principes uit labo 7.
Abstracties creëren Als ontwikkelaar wil ik niet altijd bezig zijn met de juiste hexadecimale waarde voor IO pointer aan te spreken om een sprite te renderen.</description>
    </item>
    
    <item>
      <title>Labo 9: GBA Programming in C&#43;&#43;: scrolling backgrounds</title>
      <link>https://brainbaking.com/teaching/cpp/labo-9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/labo-9/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software ontwerp in C/C++ &amp;raquo;&amp;nbsp;Naar de labo opgave
Uit labo 4 weten we hoe het VRAM van de GBA in elkaar steekt: het bestaat uit char en screen blocks. Character blocks 0 tot en met 3 vanaf 0x6010000 zijn gereserveerd voor achtergrond lagen: dat is in totaal meer geheugen dan voor sprites. De Gameboy Advance voorziet aparte registers om de 4 achtergrond lagen te configureren.
Voor sprites speelde een tilemap geen rol, voor grote achtergronden wel: het kost immers minder ruimte om de tile data apart op te slaan en in een map per tile te refereren naar die data.</description>
    </item>
    
    <item>
      <title>Labo x: Continuous Integration &amp; Deployment</title>
      <link>https://brainbaking.com/teaching/ses/ci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/ci/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
1. Continuous Integration (CI) Het softwareontwikkel proces is een continu proces: als een eerste versie van het product klaar is, en wordt overgemaakt aan klanten, volgt het onderhoud en een mogelijke volgende versie. Elke wijziging maakt potentiëel dingen kapot (geminimaliseerd met TDD), of introduceert nieuwe features. Dat betekent dat bij elke wijziging, een computer het hele build proces moet doorlopen om te controleren of er niets stuk is.</description>
    </item>
    
    <item>
      <title>Labo x: Design Patterns: (template)</title>
      <link>https://brainbaking.com/teaching/ses/designpattern_template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/designpattern_template/</guid>
      <description> &amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
&amp;ldquo;Factory&amp;rdquo; - Design Pattern Doelstelling Dive Into Design Patterns: Factory (method)
Voorbeeld 1. Opzet 2. Probleemstelling 3. Oplossing Eigenschappen van dit patroon Labo oefeningen Via  Github Classroom.
Opgave 1 bla
Denkvragen  bla  </description>
    </item>
    
    <item>
      <title>Labo x: Design Patterns: Decorator</title>
      <link>https://brainbaking.com/teaching/ses/decorator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/decorator/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
&amp;ldquo;Decorator&amp;rdquo; - Design Pattern Doelstelling  Voeg dynamisch functionaliteit toe als alternatief voor klassieke overerving. Gedraagt zich zoals het stukje &amp;lsquo;ingepakte&amp;rsquo; functionaliteit, maar voert extra handelingen uit. Wordt in Java altijd via interface implementaties uitegevoerd.  Dive Into Design Patterns: Decorator
Voorbeeld 1. Opzet Stel dat we in een fabriek op plaats X een auto samenstellen. De wagen is een zeer eenvoudige Volkswagen Golf, zonder opties.</description>
    </item>
    
    <item>
      <title>Labo x: Design Patterns: Dependency Injection</title>
      <link>https://brainbaking.com/teaching/ses/di/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/di/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
&amp;ldquo;Dependency Injection (DI)&amp;rdquo; - Design Pattern Doelstelling  Promoot modulariteit door afhankelijkheden te injecteren, zodat aparte modules eenvoudig inplugbaar zijn in andere productiecode. Op deze manier worden modules ook makkelijker tesbaar. Promoot Inversion of Control: een client die services aanroept zou niet mogen weten hoe services worden aangemaakt - deze zou moeten worden &amp;lsquo;geinjecteerd&amp;rsquo;.  Wikipedia: Dependency Injection
Voorbeeld 1. Opzet Als we verder gaan op het voorbeeld van de singleton, zien we dat een database handle nodig is om shopping cart gegevens op te halen.</description>
    </item>
    
    <item>
      <title>Labo x: Design Patterns: Facade</title>
      <link>https://brainbaking.com/teaching/ses/facade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/facade/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
&amp;ldquo;Facade&amp;rdquo; - Design Pattern Doelstelling  Scherm een complex stukje software af met behulp van een simpele interface Voorzie éénzelfde interface naar een set van verschillende mogelijke subsystemen. Een Facade is een high-level interface die mogelijks low-level systemen aanspreekt.  Dive Into Design Patterns: Facade
Voorbeeld 1. Opzet Stel dat we gegevens van de klant moeten versturen naar een overheidsinstantie. Die instantie beschikt jammer genoeg niet over voldoende budgetten om ook een cutting-edge server interface en implementatie aan te bieden.</description>
    </item>
    
    <item>
      <title>Labo x: Design Patterns: Factory</title>
      <link>https://brainbaking.com/teaching/ses/factory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/factory/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
&amp;ldquo;Factory&amp;rdquo; - Design Pattern Doelstelling  Scherm het aanmaken van bepaalde objecten af door middel van overerving en logica, waarbij die logica éénmalig wordt geïmplementeerd, en op een centrale plaats staat. Promoot een modulair model door de verantwoordlijkheid van object creatie en object gebruik te scheiden.  Dive Into Design Patterns: Factory (method)
Voorbeeld 1. Opzet Stel, je wilt aan de kassa van een niet al te grote lokale cinema een film kopen.</description>
    </item>
    
    <item>
      <title>Labo x: Design Patterns: Singleton</title>
      <link>https://brainbaking.com/teaching/ses/singleton/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/singleton/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
&amp;ldquo;Singleton&amp;rdquo; - Design Pattern Doelstelling  Vermijd de mogelijkheid tot meervoudige instantiatie van een bepaalde klasse. Er kan altijd maar één bepaalde instantie van bestaan. Voorzie een eenvoudige manier om vanuit eender waar in de code toegang te verkrijgen tot die éne instantie. Encapsuleer logica om deze instantie aan te maken, moest code dit raadplegen en dit toevallig de eerste keer zijn (lazy initialization).</description>
    </item>
    
    <item>
      <title>Labo x: Software Management Skills</title>
      <link>https://brainbaking.com/teaching/ses/management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/management/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
De chaos van het Werk De technische kant van het ontwikkelproces is slechts één kant van de medaille. De keerzijde bestaat uit het werk beheren en beheersen, zonder ten prooi te vallen aan de grillen van de klant of de chaos van de organisatie ervan.
Stel, een gemeente vraagt om een nieuwe website te ontwikkelen voor de lokale bibliotheek. Er wordt een vergadering ingepland met stafhouders om samen met jou te beslissen wat de vereisten zijn.</description>
    </item>
    
    <item>
      <title>Oefenzittingen: Github Clasroom</title>
      <link>https://brainbaking.com/teaching/ses/github-classroom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/github-classroom/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills
Onderstaande Github Classroom repositories zijn telkens Gradle Java projecten. Bewkaam jezelf eerst in de basis van Gradle als build tool.
Labo oefeningen TODO Links copypasten vanuit Github Classroom.
Design Patterns  Facade Dependency Injection Singleton Decorator Factory  Test Driven Development URL</description>
    </item>
    
    <item>
      <title>Poll: Ben ik klaar voor mijn examen?</title>
      <link>https://brainbaking.com/teaching/cpp/poll/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/poll/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software ontwerp in C/C++
Ga naar pollev.com/woutergroene532 om mee te doen. De mogelijke antwoorden zijn voor elke snippet hetzelfde:
 Compileert NIET. (Fouten bij gcc commando) Compileert, maar runtime ERROR. (Fouten bij uitvoeren: segfaults e.d.) Runt, maar ONGEWENST gedrag. (Geen fouten maar bugs in gedrag) WERKT zoals verwacht.  Includes en namespaces worden buiten beschouwing gelaten.
Klik op de snippet headers om de snippet te tonen.
Snippet 1 class Student; class Teacher { private: std::vector&amp;lt;Student*&amp;gt; students; public: Teacher() { students.</description>
    </item>
    
    <item>
      <title>SESsy Library WebApp</title>
      <link>https://brainbaking.com/teaching/ses/sessy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/sessy/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills
SESsy Library: Een geïntegreerde oefening Download Locatie: op  Github via https://github.com/KULeuven-Diepenbeek/sessylibrary. Zie README.md op de hoofdpagina. SESsy library is:
 A Library Management Simulation WebApp for the &amp;lsquo;SES&amp;rsquo; (Software Engineering Skills) course
 Installatie Download via bovenstaande Github link, of met git clone. Dit is een &amp;ldquo;Gradle&amp;rdquo; project, die de build van ons Java ecosysteem verzorgt. Dat wil zeggen dat het Gradle systeem automatisch libraries (jar bestanden) download van een centrale repository, moesten die nodig zijn.</description>
    </item>
    
    <item>
      <title>Software ontwerp in C/C&#43;&#43;: Project opdracht 2018-19</title>
      <link>https://brainbaking.com/teaching/cpp/project201819/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/project201819/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software ontwerp in C/C++
Project resultaten 2018 - 2019   Project opdracht - tweede kans Dezelfde minimumvereisten gelden als hieronder. Werk met een nieuwe Github repository, en vertrek opnieuw vanaf de gba-sprite-engine. Geregistreerde tijd bijhouden is niet meer nodig.
De opdracht is niet vrij te kiezen. Het criteria &amp;lsquo;originaliteit&amp;rsquo; zal beoordeeld worden op de manier waarop je deze vaste opdracht hebt ingekleurd.
Opdracht beschrijving Ontwerp een Mario Party kloon.</description>
    </item>
    
    <item>
      <title>Software ontwerp in C/C&#43;&#43;: Project opdracht 2019-20</title>
      <link>https://brainbaking.com/teaching/cpp/project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/project/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software ontwerp in C/C++
Project opdracht Om jullie recent opgedane object-geörienteerde technieken te toetsen gaan jullie een GBA spel ontwerpen en ontwikkelen in C++11. De focus van de opdracht ligt niet op correcte low-level IO mapping maar op kritisch denken en testen zoals gezien in labo 7. Uiteraard komen zowel pointers en GBA programming technieken van de vroegere labo&amp;rsquo;s, als C++ class inheritance en abstractie lagen uit de latere labo&amp;rsquo;s aan bod.</description>
    </item>
    
    <item>
      <title>Sparking Creativity with the Game Boy Advance</title>
      <link>https://brainbaking.com/teaching/cpp/sigcse2020/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/cpp/sigcse2020/</guid>
      <description>Poster Abstract  Numerous studies have shown that Game-Based Learning positively impacts educational effectiveness and student motivation. However, according to Amabile&amp;rsquo;s Componential Model of Creativity, motivation is only one aspect of creativity, next to expertise and creative skills. Therefore, we looked beyond motivational aspects in order to amplify all dimensions of creativity. In a &amp;lsquo;Software Design in C++&amp;rsquo; course at our local faculty of Engineering Technology, students learn to apply high-level object-oriented software development techniques on low-level embedded hardware.</description>
    </item>
    
    <item>
      <title>Test Driven Development</title>
      <link>https://brainbaking.com/teaching/ses/tdd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/tdd/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
Test-Driven Development TDD (Test-Driven Development) is een hulpmiddel bij softwareontwikkeling om minder fouten te maken en sneller fouten te vinden, door éérst een test te schrijven en dan pas de implementatie. Die (unit) test zal dus eerst falen (ROOD), want er is nog helemaal geen code, en na de correcte implementatie uiteindelijk slagen (GROEN).
mermaid.initialize({ startOnLoad: true, flowchart: { useMaxWidth: true } });  graph LR; T{&#34;</description>
    </item>
    
    <item>
      <title>Test Driven Development met algoritmes: Capita Selecta</title>
      <link>https://brainbaking.com/teaching/ses/tdd-capita/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/tdd-capita/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
Test-First Een algoritme ontwerpen Neem eerst de volgende noties terug door:
 Test Driven Development principes  Labo oefeningen Opgave 1 TODO
Opgave 2 TODO</description>
    </item>
    
    <item>
      <title>Versie- en issuebeheer</title>
      <link>https://brainbaking.com/teaching/ses/versiebeheer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/teaching/ses/versiebeheer/</guid>
      <description>&amp;laquo;&amp;nbsp;Terug naar Software Engineering Skills &amp;raquo;&amp;nbsp;Naar de labo opgave
Wat is versiebeheer of source control? Source Control is een sleutelbegrip voor ontwikkelteams. Het stelt iedereen in staat om aan dezelfde source file te werken zonder bestanden op- en neer te sturen, voorziet backups, maakt het mogelijk om releases en branches uit te rollen, &amp;hellip;
Een versiebeheer systeem bewaart alle wijzigingen aan (tekst)bestanden. Dat betekent dat eender welke wijziging, door wie dan ook, teruggedraaid kan worden.</description>
    </item>
    
  </channel>
</rss>