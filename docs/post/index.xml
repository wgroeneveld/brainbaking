<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech Blog on Brain Baking</title>
    <link>https://brainbaking.com/post/</link>
    <description>Recent content in Tech Blog on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    
	<atom:link href="https://brainbaking.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Five reasons why agile and academia don&#39;t go together</title>
      <link>https://brainbaking.com/post/agile-academia/</link>
      <pubDate>Tue, 25 Feb 2020 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/agile-academia/</guid>
      <description>I wish the word &amp;ldquo;don&amp;rsquo;t&amp;rdquo; in the title of this post could go away, but after years of trying, I have to say it cannot. There are so many aspects of the academic world that speak against agility that I had to make the conscious choice to reduce the list to five big reasons why I think both do not converge well. Remember that this is my own subjective opinion, and perhaps also meant to utter some well-meant critique, but by no means a one-sided rant: I have spent rather large parts of my career on both sides.</description>
    </item>
    
    <item>
      <title>Programming: a Creative Cognitive Process</title>
      <link>https://brainbaking.com/post/creative-cognitive-processes/</link>
      <pubDate>Tue, 08 Oct 2019 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/creative-cognitive-processes/</guid>
      <description>My previous studies investigated which non-technical skills are currently being taught in software engineering education, and which are perceived as needed to excel in the industry. We found creativity to be one of the key skills that still seemed to be mostly ignored in higher education (at least in Computing). The term &amp;lsquo;creativity&amp;rsquo; is highly subjective, contextual, and vaguely defined (or not at all), so connecting the dots proves to be quite a challenge.</description>
    </item>
    
    <item>
      <title>Teaching Object-Oriented design using the GBA</title>
      <link>https://brainbaking.com/post/teaching-oo-with-gba/</link>
      <pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/teaching-oo-with-gba/</guid>
      <description>Electrical Engineering students have to work through a programming course in their third year at KU Leuven, a course called &amp;lsquo;Software Design in C/C++&amp;rsquo;. This course is one of the things I inherited from my retired colleague when I started working for the University. As is the case with most programming courses, it&amp;rsquo;s contents was boring as hell.
So, instead of simply making minor adjustments to the syllabus and calling it a day, in the summer of 2018 I decided to throw everything in the begin and start over - hooray, a greenfield project!</description>
    </item>
    
    <item>
      <title>IT Competences and Certificates</title>
      <link>https://brainbaking.com/post/competences-and-certificates/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/competences-and-certificates/</guid>
      <description>My research on soft skills in software engineering has brought me to many shady places so far. These places are dark, murky, and carry the rotten smell of mold. Welcome to the wonderful world of &amp;ldquo;you&amp;rsquo;re doing it wrong&amp;ldquo;: professional competence frameworks. To add more strength to my point, the header image of this article is a generic one, grabbed from Pexels, using the search term &amp;ldquo;corporate&amp;rdquo;. Can it be any more enterprise-y?</description>
    </item>
    
    <item>
      <title>A Ph.D. Thesis: Iteration 2</title>
      <link>https://brainbaking.com/post/phd-iteration-2/</link>
      <pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/phd-iteration-2/</guid>
      <description>A huge amount of ideas and a quite a few months later, my original proposal, called &amp;ldquo;The disparity between industrial requirements and classic education of modern software engineering.&amp;rdquo;, changed for the better. The approved abstract is called &amp;ldquo;Improving software engineering education by closing the gap with modern non-technical industrial requirements&amp;rdquo;. After struggling to find any focus (and reference material to work with), I now settle with:
 Mastering Lean Skills in Software Engineering Education</description>
    </item>
    
    <item>
      <title>Unit Testing PicoBlaze Assembly files</title>
      <link>https://brainbaking.com/post/unit-testing-picoblaze-assembly/</link>
      <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/unit-testing-picoblaze-assembly/</guid>
      <description>To continue our unit testing tradition, each time I land on a new language or piece of technology, I carefully assess whether it&amp;rsquo;s possible to write tests first. Unsurprisingly, even in Assembly it&amp;rsquo;s possible. My recent foray into the digital electronics world has let me to write instructions for the Xilinx PicoBlaze 6 FPGA microcontroller. This Assembly dialect, written in &amp;ldquo;Psm(4)&amp;rdquo; files, is destined for a different architecture. That means linking and leaning on Google Test using C++ isn&amp;rsquo;t possible.</description>
    </item>
    
    <item>
      <title>A Decade in the Software Engineering industry</title>
      <link>https://brainbaking.com/post/a-decade-in-the-industry/</link>
      <pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/a-decade-in-the-industry/</guid>
      <description>It never occurred to me that an article like this might be very informative for those interested in knowing how things work in the software engineering industry. Google&amp;rsquo;s related results to &amp;ldquo;10 years in IT industry&amp;rdquo; are rather depressing: &amp;ldquo;what to do after 10 years of experience&amp;rdquo;, &amp;ldquo;career options after 10 years&amp;rdquo;, &amp;ldquo;how to survive industry after 10 years&amp;rdquo;, &amp;ldquo;best career path after 10 years&amp;rdquo;. It seems to suggest you&amp;rsquo;re done after &amp;ldquo;grinding to level 10&amp;rdquo; - time to boot up another character build?</description>
    </item>
    
    <item>
      <title>The Startup of a Lean Doctorate</title>
      <link>https://brainbaking.com/post/lean-doctorate/</link>
      <pubDate>Fri, 19 Oct 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/lean-doctorate/</guid>
      <description>At the start of my doctoral study, things are a bit woozy. The use of that word &amp;ldquo;bit&amp;rdquo; may be the inverse of exaggeration: shaping an abstract idea into a malleable and well-defined project is a process that can easily take up months. After that you still have to &amp;ldquo;start&amp;rdquo; actually doing stuff in context of your invented project! Most doctorates are classical examples of a waterfall process: come up with an abstract, do your (and a lot of) literature study, reach certain milestones.</description>
    </item>
    
    <item>
      <title>Productivity Tools on all platforms</title>
      <link>https://brainbaking.com/post/productivity-tools-multiplatform/</link>
      <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/productivity-tools-multiplatform/</guid>
      <description>I&amp;rsquo;ve grown so accustomed to some of Neal Ford&amp;rsquo;s The Productive Programmer &amp;ldquo;power tools&amp;rdquo; that each time I install a new OS or get a new laptop, I start with my list of cant-live-without tools. I don&amp;rsquo;t usually switch between OSes a lot, but my recent switch of work environment has opened up the possibility to boot Linux again, next to Windows 10 or of course my beloved own laptop with OSX.</description>
    </item>
    
    <item>
      <title>Domain Driven Design in C</title>
      <link>https://brainbaking.com/post/domain-driven-design-in-c/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/domain-driven-design-in-c/</guid>
      <description>As old as the language C may be, it took other languages a long time to catch up with something as mundane as a pointer. Pointers are the bread and butter of any C program and are widely regarded as a horrifying thing to work with. It might be a drag and require some plumbing (as with any language) but the payoff is extreme flexibility and control.
An address can point to anything - that includes functions.</description>
    </item>
    
    <item>
      <title>Computer Science learning pathways</title>
      <link>https://brainbaking.com/post/informatics-education-modules/</link>
      <pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/informatics-education-modules/</guid>
      <description>Also worth reading: Reverse engineering a curriculum.
I happened to come across a very interesting study path for &amp;ldquo;game programmers&amp;rdquo; published at https://github.com/miloyip/game-programmer. It&amp;rsquo;s a nice visual representation of books that help you become a better (game) programmer, starting from zero (game programming for kids) and ending at advanced game physics and Artificial Intelligence. I am not keen on becoming a game programmer but the reason this is interesting is that the author has done a great job trying to categorize the different requirements - what it takes to be a programmer in general.</description>
    </item>
    
    <item>
      <title>Reverse engineering a curriculum</title>
      <link>https://brainbaking.com/post/reverse-engineering-a-curriculum/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/reverse-engineering-a-curriculum/</guid>
      <description>Also worth reading: Teaching by philosophy.
What if, instead of starting with the beginning, you&amp;rsquo;d start with imagining where you&amp;rsquo;d land if you&amp;rsquo;d successfully finish a big project? Thinking like this would temporarily eliminate the how question and focus on the what or why question on a higher level. It&amp;rsquo;s a good exercise that might net me new ideas or forge novel connections between two slumbering thoughts. Let&amp;rsquo;s try to imagine what a curriculum for computer science should look like ideally without holding back on the actual practical possibilities - based on rough ideas noted in my proposal.</description>
    </item>
    
    <item>
      <title>A Ph.D. Thesis Proposal</title>
      <link>https://brainbaking.com/post/phd-proposal/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/phd-proposal/</guid>
      <description>The following Ph.D. proposal has been tailored to act as a clarification for colleagues and professors, hence it&amp;rsquo;s written in Dutch. The English abstract will follow later. The thesis subject:
 The disparity between industrial requirements and classic education of modern software engineering.
 De probleemstelling  Wat missen ontwikkelteams en developers1 tegenwoordig?
 Vanuit die vraag ben ik vertrokken.
Als software ingenieur met meer dan een decennium ervaring heb ik een grote interesse ontwikkeld in de manier waarop software tot stand komt.</description>
    </item>
    
    <item>
      <title>Teaching by philosophy</title>
      <link>https://brainbaking.com/post/teaching-philosophy-first/</link>
      <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/teaching-philosophy-first/</guid>
      <description>Also worth reading: reverse engineering a curriculum.
Awareness, that&amp;rsquo;s the keyword I&amp;rsquo;m looking for here.
Students are required to slog through a lot of classes during their university years. You pick a major, computer science, and you start learning things like algorithms, data structures, compilers, operating systems, and more abstract (maybe even worse) things like mathematics, geometry and logic. You of course accept those separate subjects as a part of the computer science major - there&amp;rsquo;s little other choice.</description>
    </item>
    
    <item>
      <title>Thinking in terms of objects</title>
      <link>https://brainbaking.com/post/thinking-in-terms-of-objects/</link>
      <pubDate>Sat, 28 Apr 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/thinking-in-terms-of-objects/</guid>
      <description>Writing software isn&amp;rsquo;t much different than describing a world. The world, where we live in, is a world, not the only one. With software, we could, theoretically speaking, describe our own world. If we don&amp;rsquo;t think about software, how would we describe that or another world? How would I build a fantasy world in a novel where my readers can relate to the world and be engaged?
By describing with our language.</description>
    </item>
    
    <item>
      <title>Death to pseudocode?</title>
      <link>https://brainbaking.com/post/pseudocode/</link>
      <pubDate>Fri, 06 Apr 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/pseudocode/</guid>
      <description>Coming across pseudocode isn&amp;rsquo;t something that might happen every day except if you&amp;rsquo;re used to browsing through the more theoretical and academic oriented &amp;ldquo;computer science&amp;rdquo; handbooks. We, the practical &amp;ldquo;software engineers&amp;rdquo; of nowadays, usually stop searching for something after our browser hits Stackoverflow. Stack is loaded with technical samples, gists of code, and lot&amp;rsquo;s of won&amp;rsquo;t-ever-compile-wrongly-copy-pasted code. Real code. If you&amp;rsquo;re working in Java, you probably end up with articles full of Java snippets.</description>
    </item>
    
    <item>
      <title>Hiding Code Complexity</title>
      <link>https://brainbaking.com/post/hiding-complexity/</link>
      <pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/hiding-complexity/</guid>
      <description>We like to talk about the architecture of our software because we like complexity. Software developers are the bears, and complex patterns seem to be the honey. The more I pair with people the more I wonder: &amp;ldquo;what makes us decide to take on a simple question with a difficult answer&amp;rdquo;? Why would anyone choose to implement something so complex, that it cannot be easily understood even the day after it&amp;rsquo;s committed?</description>
    </item>
    
    <item>
      <title>A quick look at 6 fountain pens</title>
      <link>https://brainbaking.com/post/fountain-pens-first-look/</link>
      <pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/fountain-pens-first-look/</guid>
      <description>My recent addiction to fountain pens has reached new heights. I happened to talk about pens with a dear colleague and she asked if I also had pens with a flexible nib. Posing such a question usually requires some basic knowledge about types of nibs, and it turned out that her friend is another fountain pen enthusiast who owns a bunch of really neat looking (and writing) pens. I was very excited when she proposed to let me try some of his special nibs.</description>
    </item>
    
    <item>
      <title>Development principles in cooking</title>
      <link>https://brainbaking.com/post/development-principles-in-cooking/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/development-principles-in-cooking/</guid>
      <description>A lot of people seem to think I&amp;rsquo;m the kind of chef who uses loads and loads of ingredients, combining and layering without thinking twice. We were having a discussion about what to cook for dinner this evening. It&amp;rsquo;s &amp;lsquo;donderdag veggiedag&amp;rsquo;, an initiative from the Belgian EVA VZW to eat a vegetarian meal each thursday, and since I&amp;rsquo;m a vegetarian, it&amp;rsquo;s generally accepted that I should know a lot of good recipes.</description>
    </item>
    
    <item>
      <title>How to teach kids to program</title>
      <link>https://brainbaking.com/post/teaching-kids-how-to-program/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/teaching-kids-how-to-program/</guid>
      <description>Jessica Ellis gave a lot of great tips on how to teach kids to program at Techorama 2017 in Antwerp. She has ben an active teacher in the tkplabs.org society and introduced something clever called &amp;ldquo;barbecoding&amp;rdquo;. In an attempt to create an appealing programming camp for boys and girls, she successfully combined food and science. She shared her story in an hour and I did my best to extract the most important principles as I thought it might be a great idea to apply that to our team in my daily work as a software developer.</description>
    </item>
    
    <item>
      <title>Unit testing in Legacy Projects: VB6</title>
      <link>https://brainbaking.com/post/vb6-unit-testing/</link>
      <pubDate>Tue, 27 Dec 2016 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/vb6-unit-testing/</guid>
      <description>Thanks to the Postmodern VB6 article I&amp;rsquo;ve found on the internetz, I decided to give SimplyVBUnit a try. My job requires sporadic visual basic 6 code changes in the big legacy project we&amp;rsquo;re converting to C#. It&amp;rsquo;s an administrative system bound to Belgium laws so as you can imagine they change every few months and the old software still has to be complaint to those crazy new rules. As a result, we sometimes dabble in VB6 code.</description>
    </item>
    
    <item>
      <title>Migrating from Extjs to React gradually</title>
      <link>https://brainbaking.com/post/react-in-extjs/</link>
      <pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/react-in-extjs/</guid>
      <description>We were looking for a few alternatives to our big ExtJS 4 application. Since it&amp;rsquo;s not that easy to completely migrate from one front-end framework to the next, a possible solution would be to start developing new parts in another framework. There&amp;rsquo;s a lot of domain logic spread in Ext views and controllers - which shouldn&amp;rsquo;t be there, we are well aware of that. Let&amp;rsquo;s call it &amp;ldquo;legacy&amp;rdquo; :-)
The application right now uses Extjs as UI and C# as backend, and lets ext do the loading of the views/controllers (living in app.</description>
    </item>
    
    <item>
      <title>Webdriver Exception Handling</title>
      <link>https://brainbaking.com/post/webdriver-exception-handling/</link>
      <pubDate>Wed, 14 Jan 2015 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/webdriver-exception-handling/</guid>
      <description>As the previous post indicated, we&amp;rsquo;re trying to stabilize our scenario tests created with WebDriver. One of the things we did was trying to capture as much data as possible if something goes wrong. Something like a typical ElementNotFoundException, or the less common StaleElementException (detached from DOM after evaluation) - these things can be hard to trace if you don&amp;rsquo;t run the tests locally. We also stumbled upon the &amp;ldquo;it works on my machine&amp;rdquo; problem - tests succeeding on one development machine but not on the other - mostly related due to timing issues.</description>
    </item>
    
    <item>
      <title>Unit Testing Extjs UI with Siesta</title>
      <link>https://brainbaking.com/post/unit-testing-extjs-ui/</link>
      <pubDate>Tue, 23 Dec 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/unit-testing-extjs-ui/</guid>
      <description>WebDriver &amp;amp; js-heavy frameworks Writing scenario tests for javascript-heavy UI webpages can be really difficult. It gets complicated pretty quickly if you&amp;rsquo;re using a lot of async calls or a lot of javascript-heavy UI components. On our current project, we use Extjs as the UI layer in a single-page aspx page to bootstrap our Extjs app. Extjs is a (heavyweight) javascript framework for creating windows, panels, grids, buttons, menus, &amp;hellip; like you&amp;rsquo;re used to when using client/server desktop applications.</description>
    </item>
    
    <item>
      <title>.NET Memory management VS JVM Memory management</title>
      <link>https://brainbaking.com/post/memory-management-vs-java/</link>
      <pubDate>Fri, 24 Oct 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/memory-management-vs-java/</guid>
      <description>Memory management is something to keep in mind when deploying and running applications on top of the JVM. Parameters like Xmx and Xms are things to juggle with when it comes to finding the perfect balance between too much memory hogging (at app startup) and too little, especially if you&amp;rsquo;re working with heavy duty entity mapping frameworks like Hibernate (and you&amp;rsquo;re not so good at writing fast HQL). When we bumped into an OutOfMemoryException in .</description>
    </item>
    
    <item>
      <title>Faking domain logic</title>
      <link>https://brainbaking.com/post/faking-domain-logic/</link>
      <pubDate>Tue, 23 Sep 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/faking-domain-logic/</guid>
      <description>Sometimes, life is just a little bit more difficult than you imagined the day before. Sometimes, you have to work on a legacy codebase with custom frameworks rooted so deeply you&amp;rsquo;re having lot&amp;rsquo;s of trouble trying to build around them. To make it a bit more concrete, here&amp;rsquo;s an example: imagine a separate DLL for interfaces and a separate DLL for the implementation. This decision was made because we use NHibernate as a data mapper and not to write beautiful domain driven design code.</description>
    </item>
    
    <item>
      <title>Custom Webdriver Page Factories</title>
      <link>https://brainbaking.com/post/custom-webdriver-page-factories/</link>
      <pubDate>Mon, 22 Sep 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/custom-webdriver-page-factories/</guid>
      <description>The problem: Webdriver elements returned by driver.FindElement() are too generic. There&amp;rsquo;re the Text, SendKeys() and Click() methods/properties (depending your on C#/Java implementation). The solution is to simply wrap all elements inside custom HTML objects which contain specific methods like ShouldContainValue or Type (okay, that&amp;rsquo;s a one-to-one mapping with SendKeys(), but it&amp;rsquo;s a lot less technical!). Instead of
 [FindsBy(How = How.CssSelector, Using = &amp;quot;.ux-desktop-taskbar-startbutton&amp;quot;)] private IWebElement startButton; [FindsBy(How = How.CssSelector, Using = &amp;quot;.</description>
    </item>
    
    <item>
      <title>Bye autotools hello Scons</title>
      <link>https://brainbaking.com/post/scons-building/</link>
      <pubDate>Wed, 26 Mar 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/scons-building/</guid>
      <description>Remember this?
 ./configure make make install  That&amp;rsquo;s not so bad, as long as you have the right compiler and linker flags configured, depending on the target OS. The real problem, however, is trying to figure out how to alter something if you didn&amp;rsquo;t write the Makefile yourself. Or if you in fact did write it, but it was some time ago. Two days. No, four hours.
The problem Try to study the autoconf and automake flow diagram, explained on Wikipedia: the GNU build system.</description>
    </item>
    
    <item>
      <title>Metaprogramming instead of duplication</title>
      <link>https://brainbaking.com/post/metaprogramming-convention-dry/</link>
      <pubDate>Fri, 14 Mar 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/metaprogramming-convention-dry/</guid>
      <description>So&amp;hellip; What&amp;rsquo;s up with all that duplication in your unit tests? Let&amp;rsquo;s take a look at a very recognizable pattern when for instance using RhinoMock in C#:
 [TestInitialize] public void SetUp() { dbConfigurationMock = MockRepository.GenerateMock&amp;lt;IDbConfiguration&amp;gt;(); mountPointLoaderMock = MockRepository.GenerateMock&amp;lt;IMountPointLoader&amp;gt;(); userEnvironmentFactoryMock = MockRepository.GenerateMock&amp;lt;IUserEnvironmentFactory&amp;gt;(); userEnvironmentLoaderMock = MockRepository.GenerateMock&amp;lt;IUserEnvironmentLoader&amp;gt;(); // ...  We agreed to suffix each instance variable with &amp;lsquo;Mock&amp;rsquo; if it&amp;rsquo;s a mock. That way, when you scroll down to an actual test case, it&amp;rsquo;s clear to everyone what&amp;rsquo;s what: mocks, stubs, actual implementations, and so forth.</description>
    </item>
    
    <item>
      <title>Enhancing the builder pattern with closures</title>
      <link>https://brainbaking.com/post/builders-dsl/</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/builders-dsl/</guid>
      <description>This post is inspired by Venkat Subramaniam&amp;rsquo;s Devoxx 2013 talk Thinking Functional Style. See downloads at agiledeveloper.com which has a rather cool Groovy example.
Classic builders For years, I&amp;rsquo;ve been using the builder pattern to quickly create new objects to be inserted into the database or to inject our domain objects with the required data. We started with so called &amp;ldquo;Object Mothers&amp;rdquo;, static methods which simply create and fill up an object, passing in a huge amount of parameters.</description>
    </item>
    
    <item>
      <title>Integration Testing with SQLite</title>
      <link>https://brainbaking.com/post/integration-testing-sqlite/</link>
      <pubDate>Mon, 04 Nov 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/integration-testing-sqlite/</guid>
      <description>This article is based on the notes I&amp;rsquo;ve collected on My Wiki.
On previous projects I&amp;rsquo;ve worked on, development PCs came with a local version of the database scheme. Each DB change also got rolled out to those computers, which enabled us developers to fool around without breaking anything on the development (or test) environment. This is another step closer to happiness, at least for our proxy customers who didn&amp;rsquo;t have to reinsert their test data every time we flushed something from a table.</description>
    </item>
    
    <item>
      <title>Visual Studio 2012 for Eclipse users</title>
      <link>https://brainbaking.com/post/vstudio-missing-features/</link>
      <pubDate>Mon, 14 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/vstudio-missing-features/</guid>
      <description>When switching over to a new editor and new language, I can sometimes get frustrated by missing features I got (very) attached to. This excludes the obvious difference in shortcut keys.
Shortcuts and refactoring tools One plugin to rule them all: ReSharpner. This productivity tool brings back the incredible development speed to the Visual Studio platform. You can almost map the eclipse (or IntelliJ, since they guys from JetBrains developed it) keys to the ReSharpner keys.</description>
    </item>
    
    <item>
      <title>Unit Testing Stored Procedures</title>
      <link>https://brainbaking.com/post/unit-testing-stored-procedures/</link>
      <pubDate>Thu, 10 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/unit-testing-stored-procedures/</guid>
      <description>This article is based on the notes I&amp;rsquo;ve collected on My Wiki.
Test Driven Development (or TDD), it&amp;rsquo;s one of those buzz words which usuallly appear in the same sentence with &amp;ldquo;scrum&amp;rdquo; or &amp;ldquo;XP&amp;rdquo;. But in practice, I&amp;rsquo;ve seen few people actually applying it all the way through. What do I mean by that? You&amp;rsquo;re probably very familiar with, say Java or .NET, and you know how to write unit tests in that language using your beloved IDE.</description>
    </item>
    
    <item>
      <title>A look at dynamic languages</title>
      <link>https://brainbaking.com/post/dynamic-languages/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/dynamic-languages/</guid>
      <description>Dynamic Languages: Constructs vergelijken Deze pagina vergelijkt verschillende dynamische talen in een poging om een overzicht te maken tussen de alsmaar groeiende lijst. De meest gebruikte features van zulke talen worden hieronder opgelijst.
Het verschil tussen MOPs en Prototypal inheritance ❗ Javascript heeft géén Meta Object Protocol (MOP) dat de taal dynamisch maakt, maar bouwt verder op prototypes. Dat wil zeggen dat het klassieke inheritance systeem niet bestaat in Javascript, maar wel nagebootst kan worden door objecten te laten afleiden van objecten.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Basics</title>
      <link>https://brainbaking.com/post/cplusplus-basics/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/cplusplus-basics/</guid>
      <description>Scope C++ heeft block level scope, net als Java, alleen is het mogelijk om een variabele binnen een for loop dezelfde naam te geven als een die buiten die block gedefiniëerd is, terwijl dat in Java niet gaat:
int j; for(int i = 0; i &amp;lt; 10; i++) { int j = i + 1; // compile fout in java }  Pointer scope auto_ptr kan gebruikt worden om een pointer automatisch te verwijderen met delete wanneer deze scope verliest - alle andere zaken moet je zelf opkuisen.</description>
    </item>
    
    <item>
      <title>Heavily used Unix Commands</title>
      <link>https://brainbaking.com/post/unix-cmd/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/unix-cmd/</guid>
      <description>Binaries zoeken Kan met whereis, maar die zoekt blijkbaar niet in &amp;ldquo;alle&amp;rdquo; binary dirs - enkel degene die geconfigureerd zijn onder:
sysctl user.cs_path # output: user.cs_path = /usr/bin:/bin:/usr/sbin:/sbin  Shell automatisation Command-line programs feeden kan met het expect tooltje. Bijvoorbeeld, bij het aanloggen in ssh moet je daarna een wachtwoord geven en op enter drukken dat niet als commandline argument meegegeven kan worden. Dit kan je dan zo forceren:</description>
    </item>
    
    <item>
      <title>Introduction to JavaScript</title>
      <link>https://brainbaking.com/post/introduction-to-js/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/introduction-to-js/</guid>
      <description>Javascript Inleiding Primitives Soorten In javascript zijn er slechts 3 primitives:
 string (geassocieerd object: String) boolean (geassocieerd object: Boolean) number (geassocieerd object: Number)  Primitives zijn immutable! Toekennen van properties maakt ook een tijdelijk object aan, dus dit heeft geen nut.
Soort afchecken Aangezien JS loosely typed is, kunnen we nooit weten wat er nu in var variabele; steekt op een bepaald moment in de code. Om dit op te lossen kan men typeof gebruiken, een functie die een string teruggeeft wat het type van die variabele is.</description>
    </item>
    
    <item>
      <title>Python Class structure basics</title>
      <link>https://brainbaking.com/post/python-basics/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/python-basics/</guid>
      <description>Handy links:
 special class methods like _ getattr _ and _ new _ dive into python - native datatypes Inside story on new style classes - ter info: Python3 heeft enkel &amp;ldquo;newstyle&amp;rdquo; classes!  Method overriding Is niet mogelijk. Gebruik default values!
def func(i, j = 2, k 3): return i + j + k func(1) # 6 func(1, 1) # 5 func(1, 1, 1) # 3  Wat wel gaat, evt met decorators, zie Five-minute multimethods in Python - is __call__ implementeren en dan met metaprogrammeren te loopen over alle methods en te kijken of de argumenten overeen komen met het type dat required is.</description>
    </item>
    
    <item>
      <title>Ruby Class structures basics</title>
      <link>https://brainbaking.com/post/ruby-classes/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/ruby-classes/</guid>
      <description>Ruby Classes Closures and lambda&amp;rsquo;s Weer 4 verschillende mogelijkheden in Ruby, zie Proc and Lambda in Ruby
Native &amp;ldquo;blocks&amp;rdquo; aanmaken Is niet mogelijk. a = { puts &amp;quot;hello&amp;quot; } geeft een Syntax error; dit moet effectief met Proc.new gebeuren.
Lambdas aanmaken Kan ook weer op twee manieren:
a = lambda { puts &amp;quot;hello&amp;quot; } b = -&amp;gt; { puts &amp;quot;hello&amp;quot; }  Blocks als argumenten doorgeven Wordt slechts één aanvaard, Procs zijn objecten en kan dus op eender welke manier.</description>
    </item>
    
    <item>
      <title>Scheme tips and tricks</title>
      <link>https://brainbaking.com/post/scheme/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/scheme/</guid>
      <description>Variable arguments Bron: http://www.cs.utexas.edu/ftp/garbage/cs345/schintro-v14/schintro_68.html
(define (stack . args) (display args)) (define (plus a b) (stack a b) (+ a b)) (plus 1 2)  Print in een lijst (1 2) af. In scheme is het mogelijk om args op te splitsen, alles dat na de &amp;ldquo;.&amp;rdquo; komt, wordt samengenomen als een lijst in een speciale variabele die de rest van de argumenten binnen pakt. Je kan dus ook x aantal argumenten &amp;ldquo;vast&amp;rdquo; zetten en de rest laten opvangen door een lijst.</description>
    </item>
    
  </channel>
</rss>